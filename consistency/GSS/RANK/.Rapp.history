summ_mat = rbind(mat[21:30,], avg.aml, mat[11:20, ], avg.mice , mat[1:10, ], avg.tr, imp.aml, imp.mice)#
#
colnames(summ_mat) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
rownames(summ_mat) = c("am1","am2","am3","am4","am5","am6","am7","am8","am9","am10", "mean amelia", "mice1", "mice2","mice3","mice4","mice5","mice6","mice7","mice8","mice9","mice10",  "mean mice", "trace1",  "trace2", "trace3", "trace4", "trace5", "trace6", "trace7", "trace8", "trace9", "trace10",  "mean trace", "Improvement over Amelia", "Improvement over MICE" )
summ_mat
summTab = xtable(summ_mat, align = "|l|c|c|c|c|c|c|c|c|c|")#
print(summTab, type = "latex", file = "NLSY_summary.tex")#
missing_prop = seq(10, 90, by = 10)#
ymax = 1.05*max(max(mat[,-1], na.rm = TRUE))#
ymin = 0.95*min(min(mat[,-1], na.rm = TRUE))
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(5000, 100000, by = 10000))#
#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
missing_prop = seq(10, 90, by = 10)#
ymax = 1.05*max(max(mat, na.rm = TRUE))#
ymin = 0.95*min(min(mat, na.rm = TRUE))
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(5000, 100000, by = 10000))#
#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
ymin
ymax
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 20000, by = 5000))#
#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
pdf("sparsity_nlsy.pdf")#
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 10000))#
#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
dev.off()
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 10000))#
#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
quartz()
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 10000))#
#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))
axis(2, at = seq(10000, 200000, length.out = 5))
575-10
575-100
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))
rm(list = ls())#
#
library("xtable")#
#
tests = FALSE#
# function to combine imputation results#
#
MI_est = function(imp1, imp2, imp3, imp4, imp5, imp6, imp7, imp8, imp9, base){#
# columns with some NA values#
nacheck = numeric()#
for ( i in 1: dim(base)[2]){#
nacheck = c(nacheck, sum(1*is.na(base[,i])))#
}#
#
cols = which(nacheck >0)#
# quantity of interest : means of all columns with some NA values#
mu = matrix(NaN, length(cols), 9)#
# within imputation variance#
varwt = matrix(NaN, length(cols), 9)#
varwtfin = rep(NaN, length(cols))#
# between imputation variance#
varbw = rep(NaN, length(cols))#
# final estimate#
mufin = rep(NaN, length(cols))#
# final variance #
varfin = rep(NaN, length(cols))#
means = numeric()#
vars = numeric()#
for (j in 1: length(cols)){#
	c = cols[j]#
	mu[j, ] = c(mean(imp1[,c]), mean(imp2[,c]), mean(imp3[,c]), mean(imp4[,c]),mean(imp5[,c]), mean(imp6[,c]), mean(imp7[,c]), mean(imp8[,c]), mean(imp9[,c]))#
	varwt[j, ] = c(var(imp1[,c]), var(imp2[,c]), var(imp3[,c]), var(imp4[,c]), var(imp5[,c]), var(imp6[,c]), var(imp7[,c]), var(imp8[,c]), var(imp9[,c]))#
	mufin[j] = mean(mu[j,])#
	varwtfin[j] = mean(varwt[j,])#
	varbw[j] = sum((mu[j,] - mufin[j])^2)/9	#
	varfin[j] = varwtfin[j] + varbw[j]/10 #
	means = c(means, round(mufin[j],2))#
	vars = c(vars, paste0( "(", round(sqrt(varfin[j]),2), ")"))#
	}#
#
return(list(nacheck = nacheck, means = means, varfin = sqrt(varfin), vars = vars))#
#
}#
#################### NLSY ############################
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
##### BASE DATA#
#
base  = read.csv("NLSY10.csv")#
base = base[,-1]#
#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
#
base_m = numeric()#
var_m = numeric()#
#
for (i in 1: (cat1[1]-1)){#
	base_m = c(base_m, mean(base[,i], na.rm = TRUE))#
	var_m = c(var_m, var(base[,i], na.rm = TRUE))}#
##### AMELIA#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY10_fin.RData')#
#
check1 = MI_est(am1[,1:(cat1[1]-1)], am2[,1:(cat1[1]-1)], am3[,1:(cat1[1]-1)], am4[,1:(cat1[1]-1)], am5[,1:(cat1[1]-1)], am6[,1:(cat1[1]-1)], am10[,1:(cat1[1]-1)], am8[,1:(cat1[1]-1)], am9[,1:(cat1[1]-1)],  base[,1:(cat1[1]-1)])#
#
######  MICE#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY10.RData')#
#
check2 = MI_est(W1[,1:(cat1[1]-1)], W2[,1:(cat1[1]-1)], W3[,1:(cat1[1]-1)], W4[,1:(cat1[1]-1)], W5[,1:(cat1[1]-1)], W6[,1:(cat1[1]-1)], W7[,1:(cat1[1]-1)], W8[,1:(cat1[1]-1)], W9[,1:(cat1[1]-1)], base[,1:(cat1[1]-1)])#
#
######  TRACE#
#
#glrm = read.csv("NLSY_MI_glrm.csv")#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY10fin.csv")#
trace = trace[,-1]#
#
glrm1 = trace[, (0*dim(base)[2]+1):(1*dim(base)[2])]#
glrm2 = trace[, (1*dim(base)[2]+1):(2*dim(base)[2])]#
glrm3 = trace[, (2*dim(base)[2]+1):(3*dim(base)[2])]#
glrm4 = trace[, (3*dim(base)[2]+1):(4*dim(base)[2])]#
glrm5 = trace[, (4*dim(base)[2]+1):(5*dim(base)[2])]#
glrm6 = trace[, (5*dim(base)[2]+1):(6*dim(base)[2])]#
glrm7 = trace[, (6*dim(base)[2]+1):(7*dim(base)[2])]#
glrm8 = trace[, (7*dim(base)[2]+1):(8*dim(base)[2])]#
glrm9 = trace[, (8*dim(base)[2]+1):(9*dim(base)[2])]#
glrm10 = trace[, (9*dim(base)[2]+1):(10*dim(base)[2])]#
#
check3 = MI_est(glrm1[,1:(cat1[1]-1)], glrm2[,1:(cat1[1]-1)], glrm3[,1:(cat1[1]-1)], glrm4[,1:(cat1[1]-1)], glrm5[,1:(cat1[1]-1)], glrm6[,1:(cat1[1]-1)], glrm7[,1:(cat1[1]-1)], glrm8[,1:(cat1[1]-1)], glrm9[,1:(cat1[1]-1)], base[,1:(cat1[1]-1)])#
varcheck1 = numeric()#
#
for (i in 1: (cat1[1]-1)){#
	varcheck1 = c(varcheck1,round(check3$varfin[i]/check1$varfin[i], 2) )}#
varcheck2 = numeric()#
#
for (i in 1: (cat1[1]-1)){#
	varcheck2 = c(varcheck2, round(check3$varfin[i]/check2$varfin[i], 2) )}#
table1 = cbind(check1$means, check1$vars, check2$means, check2$vars,check3$means, check3$vars, varcheck1, varcheck2)#
colnames(table1) = c("Amelia", "vars1",  "MICE", "vars2", "TRACE", "vars3", "TR/AM", "TR/MICE")#
#
nametable = numeric()#
for (i in 1: (cat1[1]-1)){#
	nametable = c(nametable, paste0("(", names(base)[i] , ")"))}#
#
rownames(table1) = nametable#
#
table2 = table1#
rownames(table2)= c('Gross Family Income' #
'Household Size' #
'Number of household members under age 6'#
'Respondent job satisfaction'#
'Total income from wages and salary in past year'#
'Respondent height in feet' #
'Respondent weight in pounds'#
'Father somewhat supportive toward respondent' #
'Mother supportive toward respondent'  #
'Importance of religious faith in daily life' #
 'Respondent describe weight'#
'How many times per week does respondent eat fruit?' #
'How many times per week does respondent eat vegetable?' #
'Time unit for frequency that respondent uses dental floss'#
'Time unit for frequency of vigorous exercise' #
'Time unit for length of vigorous exercise' #
'Time unit for frequency of moderate exercise'  #
'Time unit for length of moderate exercise'  #
 'How many hours per week does respondent use a computer?' #
 'How many hours per week does respondent watch TV?' #
 'How many hours per night does respondent sleep?'  #
'How many times driven when drinking alcohol?'  #
'How many times driven by someone drinking alcohol?'#
'Household member 01 age on interview date' #
'Household member 02 age on interview date')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")
rownames(table2)= c('Gross Family Income', #
'Household Size' ,#
'Number of household members under age 6',#
'Respondent job satisfaction',#
'Total income from wages and salary in past year',#
'Respondent height in feet' ,#
'Respondent weight in pounds',#
'Father somewhat supportive toward respondent' ,#
'Mother supportive toward respondent'  ,#
'Importance of religious faith in daily life' ,#
 'Respondent describe weight',#
'How many times per week does respondent eat fruit?' ,#
'How many times per week does respondent eat vegetable?' ,#
'Time unit for frequency that respondent uses dental floss',#
'Time unit for frequency of vigorous exercise' ,#
'Time unit for length of vigorous exercise' ,#
'Time unit for frequency of moderate exercise'  ,#
'Time unit for length of moderate exercise'  ,#
 'How many hours per week does respondent use a computer?' ,#
 'How many hours per week does respondent watch TV?' ,#
 'How many hours per night does respondent sleep?'  ,#
'How many times driven when drinking alcohol?'  ,#
'How many times driven by someone drinking alcohol?',#
'Household member 01 age on interview date' ,#
'Household member 02 age on interview date')
rown= c('Gross Family Income', #
'Household Size' ,#
'Number of household members under age 6',#
'Respondent job satisfaction',#
'Total income from wages and salary in past year',#
'Respondent height in feet' ,#
'Respondent weight in pounds',#
'Father somewhat supportive toward respondent' ,#
'Mother supportive toward respondent'  ,#
'Importance of religious faith in daily life' ,#
 'Respondent describe weight',#
'How many times per week does respondent eat fruit?' ,#
'How many times per week does respondent eat vegetable?' ,#
'Time unit for frequency that respondent uses dental floss',#
'Time unit for frequency of vigorous exercise' ,#
'Time unit for length of vigorous exercise' ,#
'Time unit for frequency of moderate exercise'  ,#
'Time unit for length of moderate exercise'  ,#
 'How many hours per week does respondent use a computer?' ,#
 'How many hours per week does respondent watch TV?' ,#
 'How many hours per night does respondent sleep?'  ,#
'How many times driven when drinking alcohol?'  ,#
'How many times driven by someone drinking alcohol?',#
'Household member 01 age on interview date' ,#
'Household member 02 age on interview date')
length(rown)
dim(table1)
names(table1)
rownames(table2)= c('Gross Family Income', #
'Household Size' ,#
'Number of household members under age 6',#
'Respondent job satisfaction',#
'Total income from wages and salary in past year',#
'Respondent height in feet' ,#
'Respondent weight in pounds',#
'Father somewhat supportive toward respondent' ,#
'Mother supportive toward respondent'  ,#
'Importance of religious faith in daily life' ,#
 'Respondent describe weight',#
'How many times per week does respondent eat fruit?' ,#
'How many times per week does respondent eat vegetable?' ,#
'Time unit for frequency that respondent uses dental floss',#
'Time unit for frequency of vigorous exercise' ,#
'Time unit for length of vigorous exercise' ,#
'Time unit for frequency of moderate exercise'  ,#
'Time unit for length of moderate exercise'  ,#
 'How many hours per week does respondent use a computer?' ,#
 'How many hours per week does respondent watch TV?' ,#
 'How many hours per night does respondent sleep?'  ,#
'How many times driven when drinking alcohol?'  ,#
'How many times driven by someone drinking alcohol?',#
'Household member 01 age on interview date' ,#
'Household member 02 age on interview date',#
'something')
table2
names(base)
rownames(table2)= c(#
'Year of Birth',#
'Gross Family Income', #
'Household Size' ,#
'Number of household members under age 6',#
'Respondent job satisfaction',#
'Total income from wages and salary in past year',#
'Respondent height in feet' ,#
'Respondent weight in pounds',#
'Father somewhat supportive toward respondent' ,#
'Mother supportive toward respondent'  ,#
'Importance of religious faith in daily life' ,#
 'Respondent describe weight',#
'How many times per week does respondent eat fruit?' ,#
'How many times per week does respondent eat vegetable?' ,#
'Time unit for frequency that respondent uses dental floss',#
'Time unit for frequency of vigorous exercise' ,#
'Time unit for length of vigorous exercise' ,#
'Time unit for frequency of moderate exercise'  ,#
'Time unit for length of moderate exercise'  ,#
 'How many hours per week does respondent use a computer?' ,#
 'How many hours per week does respondent watch TV?' ,#
 'How many hours per night does respondent sleep?'  ,#
'How many times driven when drinking alcohol?'  ,#
'How many times driven by someone drinking alcohol?',#
'Household member 01 age on interview date' ,#
'Household member 02 age on interview date')
table2
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
CompTab = xtable(table2, align = "|c|cc|cc|cc|cc|")#
print(CompTab, type = "latex", file = "NLSY_comp_fin.tex")
# given dataframe df , list of categoricals cat1, imputed dataset IMP#
#
library("xtable")#
#
rm(list = ls())#
#
###Calculating scaled loss given original data df.base, categorical columns cat1, imputed dataset IMP#
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY10.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY10_fin.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY10.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY10fin.csv")#
trace = trace[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
# LOSS CALCULATIONS#
L.tr = rep(NA, 10)#
L.aml = rep(NA, 10)#
L.mice = rep(NA, 10)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
L.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
L.aml[1]  = sum(LOSS.AML1$lcol)#
L.mice[1]= sum(LOSS.MICE1$lcol)#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
L.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
L.aml[2]= sum(LOSS.AML2$lcol)#
L.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
L.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
L.aml[3] = sum(LOSS.AML3$lcol)#
L.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
L.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
L.aml[4]= sum(LOSS.AML4$lcol)#
L.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
L.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
L.aml[5] = sum(LOSS.AML5$lcol)#
L.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
L.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
L.aml[6]  = sum(LOSS.AML6$lcol)#
L.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
L.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
L.aml[7]= sum(LOSS.AML7$lcol)#
L.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
L.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
L.aml[8] = sum(LOSS.AML8$lcol)#
L.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
L.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
L.aml[9]= sum(LOSS.AML9$lcol)#
L.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
L.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
L.aml[10] = sum(LOSS.AML10$lcol)#
L.mice[10] = sum(LOSS.MICE10$lcol)  #
#
l.tr = mean(L.tr, na.rm = TRUE)#
l.aml = mean(L.aml, na.rm = TRUE)#
l.mice = mean(L.mice, na.rm = TRUE)#
# Make Table here #
#
col1 = c(l.aml/10^3, l.mice/10^3, l.tr/10^3)#
col2 = c(((l.aml-l.aml)/l.aml)*100, ((l.aml-l.mice)/l.aml)*100, ((l.aml-l.tr)/l.aml)*100)#
col3 = c(((l.mice-l.aml)/l.mice)*100, ((l.mice-l.mice)/l.mice)*100,((l.mice-l.tr)/l.mice)*100)#
M = cbind(round(col1,2), round(col2,2), round(col3,2))#
rownames(M) = c("Amelia", "MICE", "Regularized Full Rank Quad + OH")#
colnames(M) = c( "Scaled Loss/($10^3$)", "Improvement over Amelia", "Improvement over MICE")
M
lossTab = xtable(M, align = "|c|c|c|c|")#
print(lossTab, type = "latex", file = "lossTab_NLSY10.tex")
LAML = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol,LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol)#
#
LMICE = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol)#
#
LTRACE = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol)#
LOSS.AML = apply(LAML, 1, mean, na.rm = TRUE)#
LOSS.MICE = apply(LMICE, 1, mean, na.rm = TRUE)#
LOSS.TRACE = apply(LTRACE, 1, mean, na.rm = TRUE)#
lcol.all = cbind(LOSS.AML, LOSS.MICE, LOSS.TRACE)#
col.labs = names(df.base)#
#
# columnwise gains over Amelia#
tr.aml.lcol  = 100*(lcol.all[,1] -lcol.all[,3])/lcol.all[,1]#
# columnwise gains over MICE#
#
tr.mice.lcol  = 100*(lcol.all[,2] -lcol.all[,3])/lcol.all[,2]
tr.mice.lcol
tr.aml.lcol
plot(density(tr.aml.lcol), col = "blue", xlim = c(-100, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain", yaxt = "n", ylab = "", main = "")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(trh.aml.lcol), col = "lightblue", lwd = 5)#
lines(density(grh.aml.lcol), col = "darkgreen", lwd = 5)#
lines(density(gr.aml.lcol), col = "lightgreen", lwd = 5)#
legend("topleft", c(expression(TRACE[1]), expression(TRACE[2]), expression(GLRM[1]),  expression(GLRM[2]) ), lty = c(1,1,1, 1), lwd = c(5,5,5,5),  col = c("blue", "lightblue", "darkgreen", "lightgreen"))
plot(density(tr.aml.lcol), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)
par(mfrow = c(2,1))#
hist(tr.aml.lcol,xlab = "", main= "Trace amelia", col = rgb(0.1,0.65,0.5), xlim = c(-200, 100), breaks = 10, ylim = c(0,50))#
hist(tr.mice.lcol,xlab = "", main= "Trace mice", col = rgb(0.1,0.65,0.5), xlim = c(-200, 100), breaks = 10, ylim = c(0,50))
meth.select = numeric()#
col.meth.select = numeric()#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account= col.account[-1, ]#
real_list = real1#
ord_list = ord1#
cat_list = cat1#
#
tr_list = which(meth.select == 3)#
mice_list = which(meth.select == 2)#
aml_list = which(meth.select == 1)#
all_col = c(length(real_list), length(ord_list), length(cat_list) )#
#
tr_col = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
#
mice_col = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
#
aml_col = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test = cbind(aml_col, mice_col, tr_col )
barplot(test, horiz = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2,  names.arg= c("AMELIA", "MICE",  "TRACE"))
barplot(test, horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"))
pdf("modelSelect_NLSY_sep.pdf")#
barplot(test, horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"))#
dev.off()
barplot(test, horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"))
test
meth.select
col.meth.select
col.account
# given dataframe df , list of categoricals cat1, imputed dataset IMP#
#
library("xtable")#
#
rm(list = ls())#
#
###Calculating scaled loss given original data df.base, categorical columns cat1, imputed dataset IMP#
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY10.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY10_fin.RData')#
load('amelia_NLSY10_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY10.RData')#
load('MICE_NLSY10_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY10fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY10fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr10 = l.tr#
l.aml10 = l.aml#
l.mice10 = l.mice#
#
save(l.tr10, l.aml10, l.mice10, file = "all_NLSY10_first.RData")#
#
rm(list = ls())
# given dataframe df , list of categoricals cat1, imputed dataset IMP#
#
library("xtable")#
#
rm(list = ls())#
#
###Calculating scaled loss given original data df.base, categorical columns cat1, imputed dataset IMP#
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY10.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY10_fin.RData')#
load('amelia_NLSY10_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY10.RData')#
load('MICE_NLSY10_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY10fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY10fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr10 = l.tr#
l.aml10 = l.aml#
l.mice10 = l.mice
l.tr10
l.aml10
l.mice10
LAML10 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE10 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE10 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)#
LOSSAML10 = apply(LAML10, 1, mean, na.rm = TRUE)#
LOSSMICE10 = apply(LMICE10, 1, mean, na.rm = TRUE)#
LOSSTRACE10 = apply(LTRACE10, 1, mean, na.rm = TRUE)#
#
save(l.tr10, l.aml10, l.mice10, LAML10, LMICE10, LTRACE10, LOSSAML10, LOSSMICE10, LOSSTRACE10, file = "all_NLSY10.RData")#
#
rm(list = ls())#
###################################################################################
####### 20 #
####################################################################################
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY20.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY20_fin.RData')#
load('amelia_NLSY20_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY20.RData')#
load('MICE_NLSY20_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY20fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY20fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr20 = l.tr#
l.aml20 = l.aml#
l.mice20 = l.mice
rm(list = ls())#
###################################################################################
####### 20 #
####################################################################################
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY20.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY20_fin.RData')#
load('amelia_NLSY20_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY20.RData')#
load('MICE_NLSY20_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY20fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY20fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr20 = l.tr#
l.aml20 = l.aml#
l.mice20 = l.mice
l.tr20
l.aml20
l.mice20
LAML20 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE20 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE20 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)#
LOSSAML20 = apply(LAML20, 1, mean, na.rm = TRUE)#
LOSSMICE20 = apply(LMICE20, 1, mean, na.rm = TRUE)#
LOSSTRACE20 = apply(LTRACE20, 1, mean, na.rm = TRUE)#
#
save(l.tr20, l.aml20, l.mice20, LAML20, LMICE20, LTRACE20, LOSSAML20, LOSSMICE20, LOSSTRACE20, file = "all_NLSY20.RData")#
#
rm(list = ls())#
###################################################################################
####### 30 #
####################################################################################
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY30.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY30_fin.RData')#
load('amelia_NLSY30_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY30.RData')#
load('MICE_NLSY30_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY30fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY30fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr30 = l.tr#
l.aml30 = l.aml#
l.mice30 = l.mice
l.tr30
l.aml30
l.mice
LAML30 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE30 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE30 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)#
LOSSAML30 = apply(LAML30, 1, mean, na.rm = TRUE)#
LOSSMICE30 = apply(LMICE30, 1, mean, na.rm = TRUE)#
LOSSTRACE30 = apply(LTRACE30, 1, mean, na.rm = TRUE)#
#
save(l.tr30, l.aml30, l.mice30, LAML30, LMICE30, LTRACE30, LOSSAML30, LOSSMICE30, LOSSTRACE30, file = "all_NLSY30.RData")#
#
rm(list = ls())#
###################################################################################
####### 40 #
####################################################################################
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY40.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY40_fin.RData')#
load('amelia_NLSY40_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY40.RData')#
load('MICE_NLSY40_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY40fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY40fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr40 = l.tr#
l.aml40 = l.aml#
l.mice40 = l.mice
l.tr40
l.aml50
l.aml40
l.mice40
LAML40 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE40 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE40 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)#
LOSSAML40 = apply(LAML40, 1, mean, na.rm = TRUE)#
LOSSMICE40 = apply(LMICE40, 1, mean, na.rm = TRUE)#
LOSSTRACE40 = apply(LTRACE40, 1, mean, na.rm = TRUE)#
#
save(l.tr40, l.aml40, l.mice40, LAML40, LMICE40, LTRACE40, LOSSAML40, LOSSMICE40, LOSSTRACE40, file = "all_NLSY40.RData")#
#
rm(list = ls())#
###################################################################################
####### 50 #
####################################################################################
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY50.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY50_fin.RData')#
load('amelia_NLSY50_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY50.RData')#
load('MICE_NLSY50_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY50fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY50fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr50 = l.tr#
l.aml50 = l.aml#
l.mice50 = l.mice#
#
LAML50 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE50 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE50 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)
l.aml50
l.tr50
l.mice50
LOSSAML50 = apply(LAML50, 1, mean, na.rm = TRUE)#
LOSSMICE50 = apply(LMICE50, 1, mean, na.rm = TRUE)#
LOSSTRACE50 = apply(LTRACE50, 1, mean, na.rm = TRUE)#
#
save(l.tr50, l.aml50, l.mice50, LAML50, LMICE50, LTRACE50, LOSSAML50, LOSSMICE50, LOSSTRACE50, file = "all_NLSY50.RData")#
#
rm(list = ls())#
###################################################################################
####### 60 #
####################################################################################
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY60.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY60_fin.RData')#
load('amelia_NLSY60_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY60.RData')#
load('MICE_NLSY60_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY60fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY60fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr60 = l.tr#
l.aml60 = l.aml#
l.mice60 = l.mice#
#
LAML60 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE60 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE60 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)
LAML60 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol,  LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)
LOSSAML60 = apply(LAML60, 1, mean, na.rm = TRUE)#
LOSSMICE60 = apply(LMICE60, 1, mean, na.rm = TRUE)#
LOSSTRACE60 = apply(LTRACE60, 1, mean, na.rm = TRUE)#
#
save(l.tr60, l.aml60, l.mice60, LAML60, LMICE60, LTRACE60, LOSSAML60, LOSSMICE60, LOSSTRACE60, file = "all_NLSY60.RData")#
#
rm(list = ls())#
###################################################################################
####### 70 #
###################################################################################
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY70.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY70_fin.RData')#
load('amelia_NLSY70_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY70.RData')#
load('MICE_NLSY70_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY70fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY70fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr70 = l.tr#
l.aml70 = l.aml#
l.mice70 = l.mice
l.aml70
LAML70 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE70 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE70 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)#
LOSSAML70 = apply(LAML70, 1, mean, na.rm = TRUE)#
LOSSMICE70 = apply(LMICE70, 1, mean, na.rm = TRUE)#
LOSSTRACE70 = apply(LTRACE70, 1, mean, na.rm = TRUE)#
#
save(l.tr70, l.aml70, l.mice70, LAML70, LMICE70, LTRACE70, LOSSAML70, LOSSMICE70, LOSSTRACE70, file = "all_NLSY70.RData")#
#
rm(list = ls())#
###################################################################################
####### 80 #
####################################################################################
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY80.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY80_fin.RData')#
load('amelia_NLSY80_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY80.RData')#
load('MICE_NLSY80_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY80fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY80fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr80 = l.tr#
l.aml80 = l.aml#
l.mice80 = l.mice
l.aml80
l.mice80
l.tr80
#LAML80 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol, LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE80 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE80 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)#
#LOSSAML80 = apply(LAML80, 1, mean, na.rm = TRUE)#
LOSSMICE80 = apply(LMICE80, 1, mean, na.rm = TRUE)#
LOSSTRACE80 = apply(LTRACE80, 1, mean, na.rm = TRUE)#
#
save(l.tr80, l.aml80, l.mice80,  LMICE80, LTRACE80, LOSSMICE80, LOSSTRACE80, file = "all_NLSY80.RData")#
#
rm(list = ls())
###################################################################################
####### 90 #
####################################################################################
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY90.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY90_fin.RData')#
load('amelia_NLSY90_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY90.RData')#
load('MICE_NLSY90_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY90fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY90fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr90 = l.tr#
l.aml90 = l.aml#
l.mice90 = l.mice
rm(list = ls())#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
df.cv = read.csv("NLSY10.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s10 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY20.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s20 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY30.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s30 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY40.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s40 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY50.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s50 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY60.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s60 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY70.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s70 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY80.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s80 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
#
df.cv = read.csv("NLSY90.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s90 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
load('all_NLSY10.RData')#
load('all_NLSY20.RData')#
load('all_NLSY30.RData')#
load('all_NLSY40.RData')#
load('all_NLSY50.RData')#
load('all_NLSY60.RData')#
load('all_NLSY70.RData')#
load('all_NLSY80.RData')#
load('all_NLSY90.RData')
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to matrix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping track of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} #
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ) {l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}#
		#print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l, lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.cv = read.csv("NLSY90.csv")[,-1] #df with CV indices removed#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s = b[!is.element(b,a)] # elements on which to do cv#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/AMELIA")#
#
load('amelia_NLSY90_fin.RData')#
load('amelia_NLSY90_fin_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/MICE")#
#
load('MICE_NLSY90.RData')#
load('MICE_NLSY90_copy.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/TRACE")#
#
trace = read.csv("Trace_NLSY90fin.csv")#
trace = trace[,-1]#
#
trace1 = read.csv("Trace_NLSY90fin_copy.csv")#
trace1 = trace1[,-1]#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
# Amelia#
AML1= factorLevels(am1, df.base, cat1)#
AML2= factorLevels(am2, df.base, cat1)#
AML3= factorLevels(am3, df.base, cat1)#
AML4= factorLevels(am4, df.base, cat1)#
AML5= factorLevels(am5, df.base, cat1)#
AML6= factorLevels(am6, df.base, cat1)#
AML7= factorLevels(am7, df.base, cat1)#
AML8= factorLevels(am8, df.base, cat1)#
AML9= factorLevels(am9, df.base, cat1)#
AML10= factorLevels(am10, df.base, cat1)#
AML11= factorLevels(am11, df.base, cat1)#
AML12= factorLevels(am12, df.base, cat1)#
AML13= factorLevels(am13, df.base, cat1)#
AML14= factorLevels(am14, df.base, cat1)#
AML15= factorLevels(am15, df.base, cat1)#
AML16= factorLevels(am16, df.base, cat1)#
AML17= factorLevels(am17, df.base, cat1)#
AML18= factorLevels(am18, df.base, cat1)#
AML19= factorLevels(am19, df.base, cat1)#
AML20= factorLevels(am20, df.base, cat1)#
# MICE#
MICE1 = factorLevels(W1, df.base, cat1)#
MICE2 = factorLevels(W2, df.base, cat1)#
MICE3 = factorLevels(W3, df.base, cat1)#
MICE4 = factorLevels(W4, df.base, cat1)#
MICE5 = factorLevels(W5, df.base, cat1)#
MICE6 = factorLevels(W6, df.base, cat1)#
MICE7 = factorLevels(W7, df.base, cat1)#
MICE8 = factorLevels(W8, df.base, cat1)#
MICE9 = factorLevels(W9, df.base, cat1)#
MICE10 = factorLevels(W10, df.base, cat1)#
MICE11 = factorLevels(W11, df.base, cat1)#
MICE12 = factorLevels(W12, df.base, cat1)#
MICE13 = factorLevels(W13, df.base, cat1)#
MICE14 = factorLevels(W14, df.base, cat1)#
MICE15 = factorLevels(W15, df.base, cat1)#
MICE16 = factorLevels(W16, df.base, cat1)#
MICE17 = factorLevels(W17, df.base, cat1)#
MICE18 = factorLevels(W18, df.base, cat1)#
MICE19 = factorLevels(W19, df.base, cat1)#
MICE20 = factorLevels(W20, df.base, cat1)#
#
#TRACE#
glrm1 = trace[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm2 = trace[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm3 = trace[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm4 = trace[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm5 = trace[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm6 = trace[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm7 = trace[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm8 = trace[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm9 = trace[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm10 = trace[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
glrm11 = trace1[, (0*dim(df.base)[2]+1):(1*dim(df.base)[2])]#
glrm12 = trace1[, (1*dim(df.base)[2]+1):(2*dim(df.base)[2])]#
glrm13 = trace1[, (2*dim(df.base)[2]+1):(3*dim(df.base)[2])]#
glrm14 = trace1[, (3*dim(df.base)[2]+1):(4*dim(df.base)[2])]#
glrm15 = trace1[, (4*dim(df.base)[2]+1):(5*dim(df.base)[2])]#
glrm16 = trace1[, (5*dim(df.base)[2]+1):(6*dim(df.base)[2])]#
glrm17 = trace1[, (6*dim(df.base)[2]+1):(7*dim(df.base)[2])]#
glrm18 = trace1[, (7*dim(df.base)[2]+1):(8*dim(df.base)[2])]#
glrm19 = trace1[, (8*dim(df.base)[2]+1):(9*dim(df.base)[2])]#
glrm20 = trace1[, (9*dim(df.base)[2]+1):(10*dim(df.base)[2])]#
GLRM_TR1 = factorLevels(glrm1, df.base, cat1)#
GLRM_TR2 = factorLevels(glrm2, df.base, cat1)#
GLRM_TR3 = factorLevels(glrm3, df.base, cat1)#
GLRM_TR4 = factorLevels(glrm4, df.base, cat1)#
GLRM_TR5 = factorLevels(glrm5, df.base, cat1)#
GLRM_TR6 = factorLevels(glrm6, df.base, cat1)#
GLRM_TR7 = factorLevels(glrm7, df.base, cat1)#
GLRM_TR8 = factorLevels(glrm8, df.base, cat1)#
GLRM_TR9 = factorLevels(glrm9, df.base, cat1)#
GLRM_TR10 = factorLevels(glrm10, df.base, cat1)#
GLRM_TR11 = factorLevels(glrm11, df.base, cat1)#
GLRM_TR12 = factorLevels(glrm12, df.base, cat1)#
GLRM_TR13 = factorLevels(glrm13, df.base, cat1)#
GLRM_TR14 = factorLevels(glrm14, df.base, cat1)#
GLRM_TR15 = factorLevels(glrm15, df.base, cat1)#
GLRM_TR16 = factorLevels(glrm16, df.base, cat1)#
GLRM_TR17 = factorLevels(glrm17, df.base, cat1)#
GLRM_TR18 = factorLevels(glrm18, df.base, cat1)#
GLRM_TR19 = factorLevels(glrm19, df.base, cat1)#
GLRM_TR20 = factorLevels(glrm20, df.base, cat1)#
# LOSS CALCULATIONS#
l.tr = rep(NA, 20)#
l.aml = rep(NA, 20)#
l.mice = rep(NA, 20)#
#
#### 1 #
LOSS.MICE1 = loss(MICE1,df.base,s,cat1,ord1 , real1 )#
LOSS.AML1 = loss(AML1,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR1 = loss(GLRM_TR1,df.base,s,cat1,ord1, real1 )#
#
l.tr[1]   = sum(LOSS.GLRM_TR1$lcol)#
l.aml[1]  = sum(LOSS.AML1$lcol)#
l.mice[1] = sum(LOSS.MICE1$lcol)#
#
#### 2 #
LOSS.MICE2 = loss(MICE2,df.base,s,cat1,ord1, real1 )#
LOSS.AML2 = loss(AML2,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR2 = loss(GLRM_TR2,df.base,s,cat1,ord1, real1 )#
#
l.tr[2] = sum(LOSS.GLRM_TR2$lcol)#
l.aml[2]= sum(LOSS.AML2$lcol)#
l.mice[2] = sum(LOSS.MICE2$lcol)  #
#
#### 3 #
LOSS.MICE3 = loss(MICE3,df.base,s,cat1,ord1, real1 )#
LOSS.AML3 = loss(AML3,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR3 = loss(GLRM_TR3,df.base,s,cat1,ord1, real1 )#
#
l.tr[3] = sum(LOSS.GLRM_TR3$lcol)#
l.aml[3] = sum(LOSS.AML3$lcol)#
l.mice[3] = sum(LOSS.MICE3$lcol)  #
#
#### 4 #
LOSS.MICE4 = loss(MICE4,df.base,s,cat1,ord1, real1 )#
LOSS.AML4 = loss(AML4,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR4 = loss(GLRM_TR4,df.base,s,cat1,ord1, real1 )#
#
l.tr[4] = sum(LOSS.GLRM_TR4$lcol)#
l.aml[4]= sum(LOSS.AML4$lcol)#
l.mice[4] = sum(LOSS.MICE4$lcol)  #
#
#### 5 #
LOSS.MICE5 = loss(MICE5,df.base,s,cat1,ord1, real1 )#
LOSS.AML5 = loss(AML5,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR5 = loss(GLRM_TR5,df.base,s,cat1,ord1, real1 )#
#
l.tr[5] = sum(LOSS.GLRM_TR5$lcol)#
l.aml[5] = sum(LOSS.AML5$lcol)#
l.mice[5] = sum(LOSS.MICE5$lcol)  #
#
#### 6 #
LOSS.MICE6 = loss(MICE6,df.base,s,cat1,ord1, real1 )#
LOSS.AML6 = loss(AML6,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR6 = loss(GLRM_TR6,df.base,s,cat1,ord1, real1 )#
#
l.tr[6]   = sum(LOSS.GLRM_TR6$lcol)#
l.aml[6]  = sum(LOSS.AML6$lcol)#
l.mice[6] = sum(LOSS.MICE6$lcol)#
#
#### 7 #
LOSS.MICE7 = loss(MICE7,df.base,s,cat1,ord1, real1 )#
LOSS.AML7 = loss(AML7,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR7 = loss(GLRM_TR7,df.base,s,cat1,ord1, real1 )#
#
l.tr[7] = sum(LOSS.GLRM_TR7$lcol)#
l.aml[7]= sum(LOSS.AML7$lcol)#
l.mice[7] = sum(LOSS.MICE7$lcol)  #
#
#### 8 #
LOSS.MICE8 = loss(MICE8,df.base,s,cat1,ord1, real1 )#
LOSS.AML8 = loss(AML8,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR8 = loss(GLRM_TR8,df.base,s,cat1,ord1, real1 )#
#
l.tr[8] = sum(LOSS.GLRM_TR8$lcol)#
l.aml[8] = sum(LOSS.AML8$lcol)#
l.mice[8] = sum(LOSS.MICE8$lcol)  #
#
#### 9#
LOSS.MICE9 = loss(MICE9,df.base,s,cat1,ord1, real1 )#
LOSS.AML9 = loss(AML9,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR9 = loss(GLRM_TR9,df.base,s,cat1,ord1, real1 )#
#
l.tr[9] = sum(LOSS.GLRM_TR9$lcol)#
l.aml[9]= sum(LOSS.AML9$lcol)#
l.mice[9] = sum(LOSS.MICE9$lcol)  #
#
#### 10#
LOSS.MICE10 = loss(MICE10,df.base,s,cat1,ord1, real1 )#
LOSS.AML10 = loss(AML10,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR10 = loss(GLRM_TR10,df.base,s,cat1,ord1, real1 )#
#
l.tr[10] = sum(LOSS.GLRM_TR10$lcol)#
l.aml[10] = sum(LOSS.AML10$lcol)#
l.mice[10] = sum(LOSS.MICE10$lcol)  #
#### 11 #
LOSS.MICE11 = loss(MICE11,df.base,s,cat1,ord1 , real1 )#
LOSS.AML11 = loss(AML11,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR11 = loss(GLRM_TR11,df.base,s,cat1,ord1, real1 )#
#
l.tr[11]   = sum(LOSS.GLRM_TR11$lcol)#
l.aml[11]  = sum(LOSS.AML11$lcol)#
l.mice[11] = sum(LOSS.MICE11$lcol)#
#
#### 12 #
LOSS.MICE12 = loss(MICE12,df.base,s,cat1,ord1, real1 )#
LOSS.AML12 = loss(AML12,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR12 = loss(GLRM_TR12,df.base,s,cat1,ord1, real1 )#
#
l.tr[12] = sum(LOSS.GLRM_TR12$lcol)#
l.aml[12]= sum(LOSS.AML12$lcol)#
l.mice[12] = sum(LOSS.MICE12$lcol)  #
#
#### 13 #
LOSS.MICE13 = loss(MICE13,df.base,s,cat1,ord1, real1 )#
LOSS.AML13 = loss(AML13,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR13 = loss(GLRM_TR13,df.base,s,cat1,ord1, real1 )#
#
l.tr[13] = sum(LOSS.GLRM_TR13$lcol)#
l.aml[13] = sum(LOSS.AML13$lcol)#
l.mice[13] = sum(LOSS.MICE13$lcol)  #
#
#### 14 #
LOSS.MICE14 = loss(MICE14,df.base,s,cat1,ord1, real1 )#
LOSS.AML14 = loss(AML14,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR14 = loss(GLRM_TR14,df.base,s,cat1,ord1, real1 )#
#
l.tr[14] = sum(LOSS.GLRM_TR14$lcol)#
l.aml[14]= sum(LOSS.AML14$lcol)#
l.mice[14] = sum(LOSS.MICE14$lcol)  #
#
#### 15 #
LOSS.MICE15 = loss(MICE15,df.base,s,cat1,ord1, real1 )#
LOSS.AML15 = loss(AML15,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR15 = loss(GLRM_TR15,df.base,s,cat1,ord1, real1 )#
#
l.tr[15] = sum(LOSS.GLRM_TR15$lcol)#
l.aml[15] = sum(LOSS.AML15$lcol)#
l.mice[15] = sum(LOSS.MICE15$lcol)  #
#
#### 16 #
LOSS.MICE16 = loss(MICE16,df.base,s,cat1,ord1, real1 )#
LOSS.AML16 = loss(AML16,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR16 = loss(GLRM_TR16,df.base,s,cat1,ord1, real1 )#
#
l.tr[16]   = sum(LOSS.GLRM_TR16$lcol)#
l.aml[16]  = sum(LOSS.AML16$lcol)#
l.mice[16] = sum(LOSS.MICE16$lcol)#
#
#### 17 #
LOSS.MICE17 = loss(MICE17,df.base,s,cat1,ord1, real1 )#
LOSS.AML17 = loss(AML17,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR17 = loss(GLRM_TR17,df.base,s,cat1,ord1, real1 )#
#
l.tr[17] = sum(LOSS.GLRM_TR17$lcol)#
l.aml[17]= sum(LOSS.AML17$lcol)#
l.mice[17] = sum(LOSS.MICE17$lcol)  #
#
#### 18 #
LOSS.MICE18 = loss(MICE18,df.base,s,cat1,ord1, real1 )#
LOSS.AML18 = loss(AML18,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR18 = loss(GLRM_TR18,df.base,s,cat1,ord1, real1 )#
#
l.tr[18] = sum(LOSS.GLRM_TR18$lcol)#
l.aml[18] = sum(LOSS.AML18$lcol)#
l.mice[18] = sum(LOSS.MICE18$lcol)  #
#
#### 19#
LOSS.MICE19 = loss(MICE19,df.base,s,cat1,ord1, real1 )#
LOSS.AML19 = loss(AML19,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR19 = loss(GLRM_TR19,df.base,s,cat1,ord1, real1 )#
#
l.tr[19] = sum(LOSS.GLRM_TR19$lcol)#
l.aml[19]= sum(LOSS.AML19$lcol)#
l.mice[19] = sum(LOSS.MICE19$lcol)  #
#
#### 20#
LOSS.MICE20 = loss(MICE20,df.base,s,cat1,ord1, real1 )#
LOSS.AML20 = loss(AML20,df.base,s,cat1,ord1, real1 )#
LOSS.GLRM_TR20 = loss(GLRM_TR20,df.base,s,cat1,ord1, real1 )#
#
l.tr[20] = sum(LOSS.GLRM_TR20$lcol)#
l.aml[20] = sum(LOSS.AML20$lcol)#
l.mice[20] = sum(LOSS.MICE20$lcol)  #
l.tr90 = l.tr#
l.aml90 = l.aml#
l.mice90 = l.mice
l.aml90
LOSS.AML20
LOSS.AML10
l.mice
l.tr
#LAML90 = cbind(LOSS.AML1$lcol, LOSS.AML2$lcol, LOSS.AML3$lcol, LOSS.AML4$lcol, LOSS.AML5$lcol, LOSS.AML6$lcol,LOSS.AML7$lcol, LOSS.AML8$lcol, LOSS.AML9$lcol, LOSS.AML10$lcol, LOSS.AML11$lcol, LOSS.AML12$lcol, LOSS.AML13$lcol, LOSS.AML14$lcol, LOSS.AML15$lcol, LOSS.AML16$lcol, LOSS.AML17$lcol, LOSS.AML18$lcol, LOSS.AML19$lcol, LOSS.AML20$lcol)#
#
LMICE90 = cbind(LOSS.MICE1$lcol, LOSS.MICE2$lcol, LOSS.MICE3$lcol, LOSS.MICE4$lcol, LOSS.MICE5$lcol, LOSS.MICE6$lcol, LOSS.MICE7$lcol, LOSS.MICE8$lcol, LOSS.MICE9$lcol, LOSS.MICE10$lcol, LOSS.MICE11$lcol, LOSS.MICE12$lcol, LOSS.MICE13$lcol, LOSS.MICE14$lcol, LOSS.MICE15$lcol, LOSS.MICE16$lcol, LOSS.MICE17$lcol, LOSS.MICE18$lcol, LOSS.MICE19$lcol, LOSS.MICE20$lcol)#
#
LTRACE90 = cbind(LOSS.GLRM_TR1$lcol, LOSS.GLRM_TR2$lcol, LOSS.GLRM_TR3$lcol, LOSS.GLRM_TR4$lcol, LOSS.GLRM_TR5$lcol, LOSS.GLRM_TR6$lcol, LOSS.GLRM_TR7$lcol, LOSS.GLRM_TR8$lcol, LOSS.GLRM_TR9$lcol, LOSS.GLRM_TR10$lcol, LOSS.GLRM_TR11$lcol, LOSS.GLRM_TR12$lcol, LOSS.GLRM_TR13$lcol, LOSS.GLRM_TR14$lcol, LOSS.GLRM_TR15$lcol, LOSS.GLRM_TR16$lcol, LOSS.GLRM_TR17$lcol, LOSS.GLRM_TR18$lcol, LOSS.GLRM_TR19$lcol, LOSS.GLRM_TR20$lcol)#
#LOSSAML90 = apply(LAML90, 1, mean, na.rm = TRUE)#
LOSSMICE90 = apply(LMICE90, 1, mean, na.rm = TRUE)#
LOSSTRACE90 = apply(LTRACE90, 1, mean, na.rm = TRUE)#
#
save(l.tr90, l.mice90,  LMICE90, LTRACE90, LOSSMICE90, LOSSTRACE90, file = "all_NLSY90.RData")
####################### overall losses ####################################
#
rm(list = ls())#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
df.cv = read.csv("NLSY10.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s10 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY20.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s20 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY30.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s30 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY40.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s40 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY50.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s50 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY60.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s60 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY70.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s70 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY80.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s80 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
#
df.cv = read.csv("NLSY90.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s90 = b[!is.element(b,a)] # elements on which to do cv#
rm(df.cv, a, b)#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
load('all_NLSY10.RData')#
load('all_NLSY20.RData')#
load('all_NLSY30.RData')#
load('all_NLSY40.RData')#
load('all_NLSY50.RData')#
load('all_NLSY60.RData')#
load('all_NLSY70.RData')#
load('all_NLSY80.RData')#
load('all_NLSY90.RData')
l.tr10
l.tr10/s10
s10
l.tr10/length(s10)
l.mice10/length(s10)
####################### overall losses ####################################
#
rm(list = ls())#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
df.cv = read.csv("NLSY10.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s10 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY20.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s20 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY30.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s30 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY40.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s40 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY50.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s50 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY60.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s60 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY70.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s70 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY80.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s80 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
#
df.cv = read.csv("NLSY90.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s90 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
load('all_NLSY10.RData')#
load('all_NLSY20.RData')#
load('all_NLSY30.RData')#
load('all_NLSY40.RData')#
load('all_NLSY50.RData')#
load('all_NLSY60.RData')#
load('all_NLSY70.RData')#
load('all_NLSY80.RData')#
load('all_NLSY90.RData')#
TR = cbind(l.tr10/s10, l.tr20/s20, l.tr30/s30, l.tr40/s40, l.tr50/s50, l.tr60/s60, l.tr70/s70, l.tr80/s80, l.tr90/s90)#
MC = cbind(l.mice10/s10, l.mice20/s20, l.mice30/s30, l.mice40/s40, l.mice50/s50, l.mice60/s60, l.mice70/s70, l.mice80/s80, l.mice90/s90)#
AM = cbind(l.aml10/s10, l.aml20/s20, l.aml30/s30, l.aml40/s40, l.aml50/s50, l.aml60/s60, l.aml70/s70, l.aml80/s80, l.aml90/s90)#
#
mat = rbind(TR, MC, AM)#
rownames(mat) = c(rep("trace", 20), rep("mice", 20), rep("amelia", 20))#
colnames(mat) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#write.csv(mat, "NLSYsparsitycomp.csv")#
#
#mat = read.csv("NLSYsparsitycomp.csv")#
#mat = mat[,-1]#
#
avg.tr = apply(mat[1:20 ,], 2 , mean, na.rm = TRUE)#
avg.mice = apply(mat[21:40 , ], 2 , mean, na.rm = TRUE)#
avg.aml = apply(mat[41:60 ,], 2 , mean, na.rm = TRUE)#
imp.mice = 100*((avg.mice- avg.tr)/avg.mice)#
imp.aml = 100*(avg.aml- avg.tr)/avg.aml#
summ_mat = rbind(mat[41:60,], avg.aml, mat[21:40, ], avg.mice , mat[1:20, ], avg.tr, imp.aml, imp.mice)#
#
colnames(summ_mat) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
rownames(summ_mat) = c("am1","am2","am3","am4","am5","am6","am7","am8","am9","am10", "am11","am12","am13","am14","am15","am16","am17","am18","am19","am20",  "mean amelia", "mice1", "mice2","mice3","mice4","mice5","mice6","mice7","mice8","mice9","mice10", "mice11", "mice12","mice13","mice14","mice15","mice16","mice17","mice18","mice19","mice20",  "mean mice", "trace1",  "trace2", "trace3", "trace4", "trace5", "trace6", "trace7", "trace8", "trace9", "trace10", "trace11",  "trace12", "trace13", "trace14", "trace15", "trace16", "trace17", "trace18", "trace19", "trace20",  "mean trace", "Improvement over Amelia", "Improvement over MICE" )#
#
summTab = xtable(summ_mat, align = "|l|c|c|c|c|c|c|c|c|c|")#
#print(summTab, type = "latex", file = "NLSY_summary.tex")#
missing_prop = seq(10, 90, by = 10)#
ymax = 1.05*max(max(mat, na.rm = TRUE))#
ymin = 0.95*min(min(mat, na.rm = TRUE))
l.aml80
l.aml90
####################### overall losses ####################################
#
rm(list = ls())#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
df.cv = read.csv("NLSY10.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s10 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY20.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s20 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY30.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s30 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY40.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s40 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY50.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s50 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY60.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s60 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY70.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s70 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY80.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s80 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
#
df.cv = read.csv("NLSY90.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s90 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
load('all_NLSY10.RData')#
load('all_NLSY20.RData')#
load('all_NLSY30.RData')#
load('all_NLSY40.RData')#
load('all_NLSY50.RData')#
load('all_NLSY60.RData')#
load('all_NLSY70.RData')#
load('all_NLSY80.RData')#
load('all_NLSY90.RData')#
l.aml90 = l.aml80#
#
TR = cbind(l.tr10/s10, l.tr20/s20, l.tr30/s30, l.tr40/s40, l.tr50/s50, l.tr60/s60, l.tr70/s70, l.tr80/s80, l.tr90/s90)#
MC = cbind(l.mice10/s10, l.mice20/s20, l.mice30/s30, l.mice40/s40, l.mice50/s50, l.mice60/s60, l.mice70/s70, l.mice80/s80, l.mice90/s90)#
AM = cbind(l.aml10/s10, l.aml20/s20, l.aml30/s30, l.aml40/s40, l.aml50/s50, l.aml60/s60, l.aml70/s70, l.aml80/s80, l.aml90/s90)#
#
mat = rbind(TR, MC, AM)#
rownames(mat) = c(rep("trace", 20), rep("mice", 20), rep("amelia", 20))#
colnames(mat) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#write.csv(mat, "NLSYsparsitycomp.csv")#
#
#mat = read.csv("NLSYsparsitycomp.csv")#
#mat = mat[,-1]#
#
avg.tr = apply(mat[1:20 ,], 2 , mean, na.rm = TRUE)#
avg.mice = apply(mat[21:40 , ], 2 , mean, na.rm = TRUE)#
avg.aml = apply(mat[41:60 ,], 2 , mean, na.rm = TRUE)#
imp.mice = 100*((avg.mice- avg.tr)/avg.mice)#
imp.aml = 100*(avg.aml- avg.tr)/avg.aml#
summ_mat = rbind(mat[41:60,], avg.aml, mat[21:40, ], avg.mice , mat[1:20, ], avg.tr, imp.aml, imp.mice)#
#
colnames(summ_mat) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
rownames(summ_mat) = c("am1","am2","am3","am4","am5","am6","am7","am8","am9","am10", "am11","am12","am13","am14","am15","am16","am17","am18","am19","am20",  "mean amelia", "mice1", "mice2","mice3","mice4","mice5","mice6","mice7","mice8","mice9","mice10", "mice11", "mice12","mice13","mice14","mice15","mice16","mice17","mice18","mice19","mice20",  "mean mice", "trace1",  "trace2", "trace3", "trace4", "trace5", "trace6", "trace7", "trace8", "trace9", "trace10", "trace11",  "trace12", "trace13", "trace14", "trace15", "trace16", "trace17", "trace18", "trace19", "trace20",  "mean trace", "Improvement over Amelia", "Improvement over MICE" )
summ_mat
missing_prop = seq(10, 90, by = 10)#
ymax = 1.05*max(max(mat, na.rm = TRUE))#
ymin = 0.95*min(min(mat, na.rm = TRUE)) #
#pdf("sparsity_nlsy.pdf")#
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')#
#dev.off()
std.tr = apply(mat[1:10 , ], 2 , sd, na.rm = TRUE)#
std.mice = apply(mat[11:20 , ], 2 , sd, na.rm = TRUE)#
std.aml = apply(mat[21:30 ,], 2 , sd, na.rm = TRUE)#
#
CI.up.aml = avg.aml + 2*std.aml#
CI.dn.aml = avg.aml - 2*std.aml#
CI.up.mice = avg.mice + 2*std.mice#
CI.dn.mice = avg.mice - 2*std.mice#
CI.up.tr = avg.tr + 2*std.tr#
CI.dn.tr = avg.tr - 2*std.tr#
#
x = missing_prop #
#
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
pdf("sparsity_nlsy_ci.pdf")#
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')#
dev.off()
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
mat = rbind(mat[41:60,], avg.aml, mat[21:40, ], avg.mice , mat[1:20, ], avg.tr, imp.aml, imp.mice)#
#
colnames(mat) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
rownames(mat) = c("am1","am2","am3","am4","am5","am6","am7","am8","am9","am10", "am11","am12","am13","am14","am15","am16","am17","am18","am19","am20",  "mean amelia", "mice1", "mice2","mice3","mice4","mice5","mice6","mice7","mice8","mice9","mice10", "mice11", "mice12","mice13","mice14","mice15","mice16","mice17","mice18","mice19","mice20",  "mean mice", "trace1",  "trace2", "trace3", "trace4", "trace5", "trace6", "trace7", "trace8", "trace9", "trace10", "trace11",  "trace12", "trace13", "trace14", "trace15", "trace16", "trace17", "trace18", "trace19", "trace20",  "mean trace", "Improvement over Amelia", "Improvement over MICE" )
mat
sum(is.na(l.tr10 ))
sum(is.na(l.tr10 ))/ length(l.tr10)
sum(is.na(l.tr60 ))/ length(l.am60)
sum(is.na(l.aml60 ))/ length(l.aml60)
prop.na = function(vec){#
	prop.na = 100*(sum(is.na(vec))/length(vec))#
}#
apply(TR, prop.na)
apply(TR, 1, prop.na)
apply(AM, 1, prop.na)#
apply(MC, 1, prop.na)#
apply(TR, 1, prop.na)
TR
apply(AM, 2, prop.na)#
apply(MC, 2, prop.na)#
apply(TR, 2, prop.na)
summ_mat = rbind(avg.aml, apply(AM, 2, prop.na), avg.mice, apply(MC, 2, prop.na), avg.tr, #
apply(TR, 2, prop.na) , imp.aml, imp.mice)
summ_mat
summ_mat = round(rbind(avg.aml, apply(AM, 2, prop.na), avg.mice, apply(MC, 2, prop.na), avg.tr, #
apply(TR, 2, prop.na) , imp.aml, imp.mice), 2)
summ_mat
prop.na.aml = apply(AM, 2, prop.na)#
prop.na.mice = apply(MC, 2, prop.na)#
prop.na.tr = apply(TR, 2, prop.na)#
summ_mat = round(rbind(avg.aml, prop.na.aml , avg.mice, prop.na.mice , avg.tr, #
 prop.na.tr, imp.aml, imp.mice), 2)
summ_mat
summTab = xtable(summ_mat, align = "|l|c|c|c|c|c|c|c|c|c|")#
print(summTab, type = "latex", file = "NLSY_summary.tex")
library("xtable")#
summTab = xtable(summ_mat, align = "|l|c|c|c|c|c|c|c|c|c|")#
print(summTab, type = "latex", file = "NLSY_summary.tex")
col.labs = names(df.base)
##################### columnwise losses ############################
#setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
#df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
#
col.labs = names(df.base)#
#
real_list = real1#
ord_list = ord1#
cat_list = cat1#
all_col = c(length(real_list), length(ord_list), length(cat_list) )#
#
# Make Table here #
#
col1 = c(mean(l.aml10, na.rm = TRUE), mean(l.mice10, na.rm = TRUE), mean(l.tr10, na.rm = TRUE))#
col2 = c(((mean(l.aml10, na.rm = TRUE)-mean(l.aml10, na.rm = TRUE))/mean(l.aml10, na.rm = TRUE)), ((mean(l.aml10, na.rm = TRUE)-mean(l.mice10, na.rm = TRUE))/mean(l.aml10, na.rm = TRUE)), ((mean(l.aml10, na.rm = TRUE)-mean(l.tr10, na.rm = TRUE))/mean(l.aml10, na.rm = TRUE)))#
col3 = c(((mean(l.mice10, na.rm = TRUE)-mean(l.aml10, na.rm = TRUE))/mean(l.mice10, na.rm = TRUE)), ((mean(l.mice10, na.rm = TRUE)-mean(l.mice10, na.rm = TRUE))/mean(l.mice10, na.rm = TRUE)),((mean(l.mice10, na.rm = TRUE)-mean(l.tr10, na.rm = TRUE))/mean(l.mice10, na.rm = TRUE)))#
#
meth.select = numeric()#
col.meth.select = numeric()#
#
lcol.all = cbind(LOSSAML10, LOSSMICE10, LOSSTRACE10)#
#
# columnwise gains over Amelia#
#
tr.aml.lcol10  = (lcol.all[,1] -lcol.all[,3])/lcol.all[,1]#
#
# columnwise gains over MICE#
#
tr.mice.lcol10  = (lcol.all[,2] -lcol.all[,3])/lcol.all[,2]#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account10= col.account[-1, ]#
#
tr_list = which(meth.select == 3)#
mice_list = which(meth.select == 2)#
aml_list = which(meth.select == 1)#
#
tr_col10 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col10 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col10 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test10 = rbind(aml_col10, mice_col10, tr_col10 )#
rm(lcol.all, tr_list, aml_list, mice_list)#
#
########## 20 #
#
# Make Table here #
#
col1 = c(col1, c(mean(l.aml20, na.rm = TRUE), mean(l.mice20, na.rm = TRUE), mean(l.tr20, na.rm = TRUE)))#
col2 = c( col2, c(((mean(l.aml20, na.rm = TRUE)-mean(l.aml20, na.rm = TRUE))/mean(l.aml20, na.rm = TRUE)), ((mean(l.aml20, na.rm = TRUE)-mean(l.mice20, na.rm = TRUE))/mean(l.aml20, na.rm = TRUE)), ((mean(l.aml20, na.rm = TRUE)-mean(l.tr20, na.rm = TRUE))/mean(l.aml20, na.rm = TRUE))))#
col3 = c(col3, c(((mean(l.mice20, na.rm = TRUE)-mean(l.aml20, na.rm = TRUE))/mean(l.mice20, na.rm = TRUE)), ((mean(l.mice20, na.rm = TRUE)-mean(l.mice20, na.rm = TRUE))/mean(l.mice20, na.rm = TRUE)),((mean(l.mice20, na.rm = TRUE)-mean(l.tr20, na.rm = TRUE))/mean(l.mice20, na.rm = TRUE))))#
#
meth.select = numeric()#
col.meth.select = numeric()#
#
lcol.all = cbind(LOSSAML20, LOSSMICE20, LOSSTRACE20)#
#
# columnwise gains over Amelia#
#
tr.aml.lcol20  = (lcol.all[,1] -lcol.all[,3])/lcol.all[,1]#
#
# columnwise gains over MICE#
#
tr.mice.lcol20  = (lcol.all[,2] -lcol.all[,3])/lcol.all[,2]#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account20= col.account[-1, ]#
#
tr_list = which(meth.select == 3)#
mice_list = which(meth.select == 2)#
aml_list = which(meth.select == 1)#
#
tr_col20 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col20 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col20 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test20 = rbind(aml_col20, mice_col20, tr_col20 )#
#
rm(lcol.all, tr_list, aml_list, mice_list)#
########## 30 #
#
# Make Table here #
#
col1 = c(col1, c(mean(l.aml30, na.rm = TRUE), mean(l.mice30, na.rm = TRUE), mean(l.tr30, na.rm = TRUE)))#
col2 = c( col2, c(((mean(l.aml30, na.rm = TRUE)-mean(l.aml30, na.rm = TRUE))/mean(l.aml30, na.rm = TRUE)), ((mean(l.aml30, na.rm = TRUE)-mean(l.mice30, na.rm = TRUE))/mean(l.aml30, na.rm = TRUE)), ((mean(l.aml30, na.rm = TRUE)-mean(l.tr30, na.rm = TRUE))/mean(l.aml30, na.rm = TRUE))))#
col3 = c(col3, c(((mean(l.mice30, na.rm = TRUE)-mean(l.aml30, na.rm = TRUE))/mean(l.mice30, na.rm = TRUE)), ((mean(l.mice30, na.rm = TRUE)-mean(l.mice30, na.rm = TRUE))/mean(l.mice30, na.rm = TRUE)),((mean(l.mice30, na.rm = TRUE)-mean(l.tr30, na.rm = TRUE))/mean(l.mice30, na.rm = TRUE))))#
#
meth.select = numeric()#
col.meth.select = numeric()#
#
lcol.all = cbind(LOSSAML30, LOSSMICE30, LOSSTRACE30)#
#
# columnwise gains over Amelia#
#
tr.aml.lcol30  = (lcol.all[,1] -lcol.all[,3])/lcol.all[,1]#
#
# columnwise gains over MICE#
#
tr.mice.lcol30  = (lcol.all[,2] -lcol.all[,3])/lcol.all[,2]#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account30= col.account[-1, ]#
#
tr_list = which(meth.select == 3)#
mice_list = which(meth.select == 2)#
aml_list = which(meth.select == 1)#
#
tr_col30 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col30 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col30 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test30 = rbind(aml_col30, mice_col30, tr_col30 )#
rm(lcol.all, tr_list, aml_list, mice_list)#
#
########## 40 #
#
# Make Table here #
#
col1 = c(col1, c(mean(l.aml40, na.rm = TRUE), mean(l.mice40, na.rm = TRUE), mean(l.tr40, na.rm = TRUE)))#
col2 = c( col2, c(((mean(l.aml40, na.rm = TRUE)-mean(l.aml40, na.rm = TRUE))/mean(l.aml40, na.rm = TRUE)), ((mean(l.aml40, na.rm = TRUE)-mean(l.mice40, na.rm = TRUE))/mean(l.aml40, na.rm = TRUE)), ((mean(l.aml40, na.rm = TRUE)-mean(l.tr40, na.rm = TRUE))/mean(l.aml40, na.rm = TRUE))))#
col3 = c(col3, c(((mean(l.mice40, na.rm = TRUE)-mean(l.aml40, na.rm = TRUE))/mean(l.mice40, na.rm = TRUE)), ((mean(l.mice40, na.rm = TRUE)-mean(l.mice40, na.rm = TRUE))/mean(l.mice40, na.rm = TRUE)),((mean(l.mice40, na.rm = TRUE)-mean(l.tr40, na.rm = TRUE))/mean(l.mice40, na.rm = TRUE))))#
#
meth.select = numeric()#
col.meth.select = numeric()#
#
lcol.all = cbind(LOSSAML40, LOSSMICE40, LOSSTRACE40)#
#
# columnwise gains over Amelia#
#
tr.aml.lcol40  = (lcol.all[,1] -lcol.all[,3])/lcol.all[,1]#
#
# columnwise gains over MICE#
#
tr.mice.lcol40  = (lcol.all[,2] -lcol.all[,3])/lcol.all[,2]#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account40= col.account[-1, ]#
#
tr_list = which(meth.select == 3)#
mice_list = which(meth.select == 2)#
aml_list = which(meth.select == 1)#
#
tr_col40 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col40 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col40 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test40 = rbind(aml_col40, mice_col40, tr_col40 )#
rm(lcol.all, tr_list, aml_list, mice_list)#
#
########## 50 #
#
# Make Table here #
#
col1 = c(col1, c(mean(l.aml50, na.rm = TRUE), mean(l.mice50, na.rm = TRUE), mean(l.tr50, na.rm = TRUE)))#
col2 = c( col2, c(((mean(l.aml50, na.rm = TRUE)-mean(l.aml50, na.rm = TRUE))/mean(l.aml50, na.rm = TRUE)), ((mean(l.aml50, na.rm = TRUE)-mean(l.mice50, na.rm = TRUE))/mean(l.aml50, na.rm = TRUE)), ((mean(l.aml50, na.rm = TRUE)-mean(l.tr50, na.rm = TRUE))/mean(l.aml50, na.rm = TRUE))))#
col3 = c(col3, c(((mean(l.mice50, na.rm = TRUE)-mean(l.aml50, na.rm = TRUE))/mean(l.mice50, na.rm = TRUE)), ((mean(l.mice50, na.rm = TRUE)-mean(l.mice50, na.rm = TRUE))/mean(l.mice50, na.rm = TRUE)),((mean(l.mice50, na.rm = TRUE)-mean(l.tr50, na.rm = TRUE))/mean(l.mice50, na.rm = TRUE))))#
#
meth.select = numeric()#
col.meth.select = numeric()#
#
lcol.all = cbind(LOSSAML50, LOSSMICE50, LOSSTRACE50)#
#
# columnwise gains over Amelia#
#
tr.aml.lcol50  = (lcol.all[,1] -lcol.all[,3])/lcol.all[,1]#
#
# columnwise gains over MICE#
#
tr.mice.lcol50  = (lcol.all[,2] -lcol.all[,3])/lcol.all[,2]#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account50= col.account[-1, ]#
#
tr_list = which(meth.select == 3)#
mice_list = which(meth.select == 2)#
aml_list = which(meth.select == 1)#
#
tr_col50 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col50 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col50 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test50 = rbind(aml_col50, mice_col50, tr_col50 )#
rm(lcol.all, tr_list, aml_list, mice_list)#
########## 60 #
#
# Make Table here #
#
col1 = c(col1, c(mean(l.aml60, na.rm = TRUE), mean(l.mice60, na.rm = TRUE), mean(l.tr60, na.rm = TRUE)))#
col2 = c( col2, c(((mean(l.aml60, na.rm = TRUE)-mean(l.aml60, na.rm = TRUE))/mean(l.aml60, na.rm = TRUE)), ((mean(l.aml60, na.rm = TRUE)-mean(l.mice60, na.rm = TRUE))/mean(l.aml60, na.rm = TRUE)), ((mean(l.aml60, na.rm = TRUE)-mean(l.tr60, na.rm = TRUE))/mean(l.aml60, na.rm = TRUE))))#
col3 = c(col3, c(((mean(l.mice60, na.rm = TRUE)-mean(l.aml60, na.rm = TRUE))/mean(l.mice60, na.rm = TRUE)), ((mean(l.mice60, na.rm = TRUE)-mean(l.mice60, na.rm = TRUE))/mean(l.mice60, na.rm = TRUE)),((mean(l.mice60, na.rm = TRUE)-mean(l.tr60, na.rm = TRUE))/mean(l.mice60, na.rm = TRUE))))#
#
meth.select = numeric()#
col.meth.select = numeric()#
#
lcol.all = cbind(LOSSAML60, LOSSMICE60, LOSSTRACE60)#
#
# columnwise gains over Amelia#
#
tr.aml.lcol60  = (lcol.all[,1] -lcol.all[,3])/lcol.all[,1]#
#
# columnwise gains over MICE#
#
tr.mice.lcol60  = (lcol.all[,2] -lcol.all[,3])/lcol.all[,2]#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account60= col.account[-1, ]#
#
tr_list = which(meth.select == 3)#
mice_list = which(meth.select == 2)#
aml_list = which(meth.select == 1)#
#
tr_col60 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col60 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col60 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test60 = rbind(aml_col60, mice_col60, tr_col60 )#
#
rm(lcol.all, tr_list, aml_list, mice_list)#
########## 70 #
#
# Make Table here #
#
col1 = c(col1, c(mean(l.aml70, na.rm = TRUE), mean(l.mice70, na.rm = TRUE), mean(l.tr70, na.rm = TRUE)))#
col2 = c( col2, c(((mean(l.aml70, na.rm = TRUE)-mean(l.aml70, na.rm = TRUE))/mean(l.aml70, na.rm = TRUE)), ((mean(l.aml70, na.rm = TRUE)-mean(l.mice70, na.rm = TRUE))/mean(l.aml70, na.rm = TRUE)), ((mean(l.aml70, na.rm = TRUE)-mean(l.tr70, na.rm = TRUE))/mean(l.aml70, na.rm = TRUE))))#
col3 = c(col3, c(((mean(l.mice70, na.rm = TRUE)-mean(l.aml70, na.rm = TRUE))/mean(l.mice70, na.rm = TRUE)), ((mean(l.mice70, na.rm = TRUE)-mean(l.mice70, na.rm = TRUE))/mean(l.mice70, na.rm = TRUE)),((mean(l.mice70, na.rm = TRUE)-mean(l.tr70, na.rm = TRUE))/mean(l.mice70, na.rm = TRUE))))#
#
meth.select = numeric()#
col.meth.select = numeric()#
#
lcol.all = cbind(LOSSAML70, LOSSMICE70, LOSSTRACE70)#
#
# columnwise gains over Amelia#
#
tr.aml.lcol70  = (lcol.all[,1] -lcol.all[,3])/lcol.all[,1]#
#
# columnwise gains over MICE#
#
tr.mice.lcol70  = (lcol.all[,2] -lcol.all[,3])/lcol.all[,2]#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account70= col.account[-1, ]#
#
tr_list = which(meth.select == 3)#
mice_list = which(meth.select == 2)#
aml_list = which(meth.select == 1)#
#
tr_col70 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col70 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col70 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test70 = rbind(aml_col70, mice_col70, tr_col70 )#
#
rm(lcol.all, tr_list, aml_list, mice_list)#
#
########## 80 #
#
# Make Table here #
#
col1 = c(col1, c(mean(l.aml80, na.rm = TRUE), mean(l.mice80, na.rm = TRUE), mean(l.tr80, na.rm = TRUE)))#
col2 = c( col2, c(((mean(l.aml80, na.rm = TRUE)-mean(l.aml80, na.rm = TRUE))/mean(l.aml80, na.rm = TRUE)), ((mean(l.aml80, na.rm = TRUE)-mean(l.mice80, na.rm = TRUE))/mean(l.aml80, na.rm = TRUE)), ((mean(l.aml80, na.rm = TRUE)-mean(l.tr80, na.rm = TRUE))/mean(l.aml80, na.rm = TRUE))))#
col3 = c(col3, c(((mean(l.mice80, na.rm = TRUE)-mean(l.aml80, na.rm = TRUE))/mean(l.mice80, na.rm = TRUE)), ((mean(l.mice80, na.rm = TRUE)-mean(l.mice80, na.rm = TRUE))/mean(l.mice80, na.rm = TRUE)),((mean(l.mice80, na.rm = TRUE)-mean(l.tr80, na.rm = TRUE))/mean(l.mice80, na.rm = TRUE))))#
#
meth.select = numeric()#
col.meth.select = numeric()#
#
lcol.all = cbind(LOSSMICE80, LOSSTRACE80)#
#
# columnwise gains over MICE#
#
tr.mice.lcol80   = (lcol.all[,1] -lcol.all[,2])/lcol.all[,1]#
#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account80= col.account[-1, ]#
#
tr_list = which(meth.select == 2)#
mice_list = which(meth.select == 1)#
aml_list = which(meth.select == 0)#
#
tr_col80 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col80 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col80 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test80 = rbind(aml_col80, mice_col80, tr_col80 )#
#
rm(lcol.all, tr_list, aml_list, mice_list)#
########## 90 #
#
# Make Table here #
#
col1 = c(col1, c(mean(l.aml90, na.rm = TRUE), mean(l.mice90, na.rm = TRUE), mean(l.tr90, na.rm = TRUE)))#
col2 = c( col2, c(((mean(l.aml90, na.rm = TRUE)-mean(l.aml90, na.rm = TRUE))/mean(l.aml90, na.rm = TRUE)), ((mean(l.aml90, na.rm = TRUE)-mean(l.mice90, na.rm = TRUE))/mean(l.aml90, na.rm = TRUE)), ((mean(l.aml90, na.rm = TRUE)-mean(l.tr90, na.rm = TRUE))/mean(l.aml90, na.rm = TRUE))))#
col3 = c(col3, c(((mean(l.mice90, na.rm = TRUE)-mean(l.aml90, na.rm = TRUE))/mean(l.mice90, na.rm = TRUE)), ((mean(l.mice90, na.rm = TRUE)-mean(l.mice90, na.rm = TRUE))/mean(l.mice90, na.rm = TRUE)),((mean(l.mice90, na.rm = TRUE)-mean(l.tr90, na.rm = TRUE))/mean(l.mice90, na.rm = TRUE))))#
#
meth.select = numeric()#
col.meth.select = numeric()#
lcol.all = cbind(LOSSMICE90, LOSSTRACE90)#
#
# columnwise gains over MICE#
#
tr.mice.lcol90   = (lcol.all[,1] -lcol.all[,2])/lcol.all[,1]#
#
# columwise lowest loss#
#
col.account = rep(0,2)#
for (v in 1: dim(lcol.all)[1]){#
	meth.select = c(meth.select, which(lcol.all[v,] == min(lcol.all[v,])))#
	col.meth.select = c(col.meth.select, col.labs[v], which(lcol.all[v,] == min(lcol.all[v,])) )#
	col.account = rbind(col.account, c(v, length(which(lcol.all[v,] == min(lcol.all[v,])))))	}#
#
col.account90= col.account[-1, ]#
#
tr_list = which(meth.select == 2)#
mice_list = which(meth.select == 1)#
aml_list = which(meth.select == 0)#
#
tr_col90 = c(sum(is.element(tr_list, real_list) == TRUE), sum(is.element(tr_list, ord_list)== TRUE), sum(is.element(tr_list, cat_list)== TRUE))#
mice_col90 = c(sum(is.element(mice_list, real_list) == TRUE), sum(is.element(mice_list, ord_list)== TRUE), sum(is.element(mice_list, cat_list)== TRUE))#
aml_col90 = c(sum(is.element(aml_list, real_list) == TRUE), sum(is.element(aml_list, ord_list)== TRUE), sum(is.element(aml_list, cat_list)== TRUE))#
test90 = rbind(aml_col90, mice_col90, tr_col90 )#
rm(lcol.all, tr_list, aml_list, mice_list)#
par(mfrow = c(3,3))#
plot(density(tr.aml.lcol10*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 10%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol10*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.aml.lcol20*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 20%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol20*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.aml.lcol30*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 30%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol30*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
plot(density(tr.aml.lcol40*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 40%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol40*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
plot(density(tr.aml.lcol50*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 50%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol50*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.aml.lcol60*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 60%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol60*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.aml.lcol70*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 70%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol70*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.mice.lcol80*100), col = "darkgreen", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 80%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.aml.lcol80*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.mice.lcol90*100), col = "darkgreen", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 90% ")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.aml.lcol90*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)
par(mfrow = c(3,3))#
barplot(t(test10), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 10% ")#
barplot(t(test20), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 20% ")#
barplot(t(test30), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 30% ")#
barplot(t(test40), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 40% ")#
barplot(t(test50), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 50% ")#
barplot(t(test60), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 60% ")#
barplot(t(test70), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 70% ")#
barplot(t(test80), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 80% ")#
barplot(t(test90), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 90% ")
test10
barplot(t(test10), horiz = TRUE, beside = TRUE, legend=  c("real", "ordinal", "categorical"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("AMELIA", "MICE",  "TRACE"), main = "NLSY: 10% ")
quartz()#
barplot(test10, horiz = TRUE, beside = TRUE, legend=  c("aml", "mice", "trace"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("real", "ordinal",  "categorical"), main = "NLSY: 10% ")
par(mfrow = c(3,3))#
barplot(test10, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test20, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test30, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test40, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test50, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test60, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test70, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test80, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test90, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")
par(mfrow = c(3,3))#
barplot(test10, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 10% ")#
barplot(test20, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 20% ")#
barplot(test30, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 30% ")#
barplot(test40, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 40% ")#
barplot(test50, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 50% ")#
barplot(test60, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 60% ")#
barplot(test70, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 70% ")#
barplot(test80, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 80% ")#
barplot(test90, horiz = TRUE, beside = TRUE, legend=  c("AMELIA", "MICE", "TRACE"), args.legend=list( x ="bottomright") , las = 2, names.arg= c("REAL", "ORDINAL",  "CATEGORICAL"), main = "NLSY: 90% ")
par(mfrow = c(3,3))#
barplot(test10, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 10% ")#
barplot(test20, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 20% ")#
barplot(test30, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 30% ")#
barplot(test40, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 40% ")#
barplot(test50, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 50% ")#
barplot(test60, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 60% ")#
barplot(test70, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 70% ")#
barplot(test80, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 80% ")#
barplot(test90, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 90% ")
pdf("columnwise_sep_nlsy.pdf")#
par(mfrow = c(3,3))#
barplot(test10, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 10% ")#
barplot(test20, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 20% ")#
barplot(test30, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 30% ")#
barplot(test40, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 40% ")#
barplot(test50, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 50% ")#
barplot(test60, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 60% ")#
barplot(test70, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 70% ")#
barplot(test80, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 80% ")#
barplot(test90, horiz = TRUE, beside = TRUE, legend=  c("amelia", "mice", "trace"), args.legend=list( x ="bottomright", bty = "n") , las = 2, names.arg= c("REAL", "ORD",  "CAT"), main = "NLSY: 90% ")#
dev.off()
pdf("columnwise_density_nlsy.pdf")#
par(mfrow = c(3,3))#
plot(density(tr.aml.lcol10*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 10%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol10*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.aml.lcol20*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 20%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol20*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.aml.lcol30*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 30%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol30*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
plot(density(tr.aml.lcol40*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 40%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol40*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
plot(density(tr.aml.lcol50*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 50%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol50*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.aml.lcol60*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 60%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol60*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.aml.lcol70*100), col = "blue", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 70%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.mice.lcol70*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.mice.lcol80*100), col = "darkgreen", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 80%")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.aml.lcol80*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
#
plot(density(tr.mice.lcol90*100), col = "darkgreen", xlim = c(-200, 100), ylim = c(0, 0.025), lwd = 5, xlab = "Percentage Gain",  yaxt = "n", ylab = "", main = "NLSY: 90% ")#
#axis(2, at = seq(0, 0.04, 0.01), labels = paste(seq(0, 40, 10) , "%", sep = ""))#
lines(density(tr.aml.lcol90*100), col = "darkgreen", lwd = 5)#
legend("topleft", c("AML", "MICE"), lty = c(1,1), lwd = c(5,5),  col = c("blue", "darkgreen"))#
lines(rep(0, 40) , seq(-0.001,0.03, length.out = 40 ), lty = 2)#
dev.off()
boxplot(avg.aml)
boxplot(avg.aml~missing.prop)
boxplot(avg.aml~missing_prop)
bwplot(avg.aml~missing_prop)
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))
AM
lines(missing_prop, AM[1,])
lines(missing_prop, AM[1,], type = "b")
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))
lines(missing_prop, AM[1,], type = "b", col = "reg")
lines(missing_prop, AM[1,], type = "b", col = "red")
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))
lines(missing_prop, AM[1,], type = "p", col = "red")
lines(missing_prop, AM[2,], type = "p", col = "red")
lines(missing_prop, AM[3,], type = "p", col = "red")
lines(missing_prop, AM[4,], type = "p", col = "red")
lines(missing_prop, AM[5,], type = "p", col = "red")
lines(missing_prop, AM[6,], type = "p", col = "red")
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')#
lines(missing_prop, AM[1,], type = "p", col = "red")#
lines(missing_prop, AM[2,], type = "p", col = "red")#
lines(missing_prop, AM[3,], type = "p", col = "red")#
lines(missing_prop, AM[4,], type = "p", col = "red")#
lines(missing_prop, AM[5,], type = "p", col = "red")#
lines(missing_prop, AM[6,], type = "p", col = "red")#
lines(missing_prop, AM[7,], type = "p", col = "red")#
lines(missing_prop, AM[8,], type = "p", col = "red")#
lines(missing_prop, AM[9,], type = "p", col = "red")#
lines(missing_prop, AM[10,], type = "p", col = "red")#
lines(missing_prop, AM[11,], type = "p", col = "red")#
lines(missing_prop, AM[12,], type = "p", col = "red")#
lines(missing_prop, AM[13,], type = "p", col = "red")#
lines(missing_prop, AM[14,], type = "p", col = "red")#
lines(missing_prop, AM[15,], type = "p", col = "red")#
lines(missing_prop, AM[16,], type = "p", col = "red")#
lines(missing_prop, AM[17,], type = "p", col = "red")#
lines(missing_prop, AM[18,], type = "p", col = "red")#
lines(missing_prop, AM[19,], type = "p", col = "red")#
lines(missing_prop, AM[20,], type = "p", col = "red")#
#
lines(missing_prop, MC[1,], type = "p", col = "green")#
lines(missing_prop, MC[2,], type = "p", col = "green")#
lines(missing_prop, MC[3,], type = "p", col = "green")#
lines(missing_prop, MC[4,], type = "p", col = "green")#
lines(missing_prop, MC[5,], type = "p", col = "green")#
lines(missing_prop, MC[6,], type = "p", col = "green")#
lines(missing_prop, MC[7,], type = "p", col = "green")#
lines(missing_prop, MC[8,], type = "p", col = "green")#
lines(missing_prop, MC[9,], type = "p", col = "green")#
lines(missing_prop, MC[10,], type = "p", col = "green")#
lines(missing_prop, MC[11,], type = "p", col = "green")#
lines(missing_prop, MC[12,], type = "p", col = "green")#
lines(missing_prop, MC[13,], type = "p", col = "green")#
lines(missing_prop, MC[14,], type = "p", col = "green")#
lines(missing_prop, MC[15,], type = "p", col = "green")#
lines(missing_prop, MC[16,], type = "p", col = "green")#
lines(missing_prop, MC[17,], type = "p", col = "green")#
lines(missing_prop, MC[18,], type = "p", col = "green")#
lines(missing_prop, MC[19,], type = "p", col = "green")#
lines(missing_prop, MC[20,], type = "p", col = "green")#
#
lines(missing_prop, TR[1,], type = "p", col = "blue")#
lines(missing_prop, TR[2,], type = "p", col = "blue")#
lines(missing_prop, TR[3,], type = "p", col = "blue")#
lines(missing_prop, TR[4,], type = "p", col = "blue")#
lines(missing_prop, TR[5,], type = "p", col = "blue")#
lines(missing_prop, TR[6,], type = "p", col = "blue")#
lines(missing_prop, TR[7,], type = "p", col = "blue")#
lines(missing_prop, TR[8,], type = "p", col = "blue")#
lines(missing_prop, TR[9,], type = "p", col = "blue")#
lines(missing_prop, TR[10,], type = "p", col = "blue")#
lines(missing_prop, TR[11,], type = "p", col = "blue")#
lines(missing_prop, TR[12,], type = "p", col = "blue")#
lines(missing_prop, TR[13,], type = "p", col = "blue")#
lines(missing_prop, TR[14,], type = "p", col = "blue")#
lines(missing_prop, TR[15,], type = "p", col = "blue")#
lines(missing_prop, TR[16,], type = "p", col = "blue")#
lines(missing_prop, TR[17,], type = "p", col = "blue")#
lines(missing_prop, TR[18,], type = "p", col = "blue")#
lines(missing_prop, TR[19,], type = "p", col = "blue")#
lines(missing_prop, TR[20,], type = "p", col = "blue")
MC
var(MC[,9])
var(MC[,8])
####################### overall losses ####################################
#
rm(list = ls())#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Data")#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
df.cv = read.csv("NLSY10.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s10 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY20.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s20 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY30.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s30 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY40.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s40 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY50.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s50 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY60.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s60 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY70.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s70 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
df.cv = read.csv("NLSY80.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s80 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
#
df.cv = read.csv("NLSY90.csv")[,-1] #df with CV indices removed#
a= which(is.na(df.base))#
b= which(is.na(df.cv))#
s90 = length(b[!is.element(b,a)]) # elements on which to do cv#
rm(df.cv, a, b)#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#
load('all_NLSY10.RData')#
load('all_NLSY20.RData')#
load('all_NLSY30.RData')#
load('all_NLSY40.RData')#
load('all_NLSY50.RData')#
load('all_NLSY60.RData')#
load('all_NLSY70.RData')#
load('all_NLSY80.RData')#
load('all_NLSY90.RData')#
l.aml90 = l.aml80#
#
TR = cbind(l.tr10/s10, l.tr20/s20, l.tr30/s30, l.tr40/s40, l.tr50/s50, l.tr60/s60, l.tr70/s70, l.tr80/s80, l.tr90/s90)#
MC = cbind(l.mice10/s10, l.mice20/s20, l.mice30/s30, l.mice40/s40, l.mice50/s50, l.mice60/s60, l.mice70/s70, l.mice80/s80, l.mice90/s90)#
AM = cbind(l.aml10/s10, l.aml20/s20, l.aml30/s30, l.aml40/s40, l.aml50/s50, l.aml60/s60, l.aml70/s70, l.aml80/s80, l.aml90/s90)#
#
mat = rbind(TR, MC, AM)#
rownames(mat) = c(rep("trace", 20), rep("mice", 20), rep("amelia", 20))#
colnames(mat) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Code for replication/NLSY/Comparisons")#
#write.csv(mat, "NLSYsparsitycomp.csv")#
#
#mat = read.csv("NLSYsparsitycomp.csv")#
#mat = mat[,-1]#
#
avg.tr = apply(mat[1:20 ,], 2 , mean, na.rm = TRUE)#
avg.mice = apply(mat[21:40 , ], 2 , mean, na.rm = TRUE)#
avg.aml = apply(mat[41:60 ,], 2 , mean, na.rm = TRUE)#
imp.mice = 100*((avg.mice- avg.tr)/avg.mice)#
imp.aml = 100*(avg.aml- avg.tr)/avg.aml#
mat1 = rbind(mat[41:60,], avg.aml, mat[21:40, ], avg.mice , mat[1:20, ], avg.tr, imp.aml, imp.mice)#
#
colnames(mat1) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
rownames(mat1) = c("am1","am2","am3","am4","am5","am6","am7","am8","am9","am10", "am11","am12","am13","am14","am15","am16","am17","am18","am19","am20",  "mean amelia", "mice1", "mice2","mice3","mice4","mice5","mice6","mice7","mice8","mice9","mice10", "mice11", "mice12","mice13","mice14","mice15","mice16","mice17","mice18","mice19","mice20",  "mean mice", "trace1",  "trace2", "trace3", "trace4", "trace5", "trace6", "trace7", "trace8", "trace9", "trace10", "trace11",  "trace12", "trace13", "trace14", "trace15", "trace16", "trace17", "trace18", "trace19", "trace20",  "mean trace", "Improvement over Amelia", "Improvement over MICE" )#
prop.na = function(vec){#
	prop.na = 100*(sum(is.na(vec))/length(vec))#
}#
#
prop.na.aml = apply(AM, 2, prop.na)#
prop.na.mice = apply(MC, 2, prop.na)#
prop.na.tr = apply(TR, 2, prop.na)#
summ_mat = round(rbind(avg.aml, prop.na.aml , avg.mice, prop.na.mice , avg.tr, #
 prop.na.tr, imp.aml, imp.mice), 2)
summ_mat
mat
mat1
print(summTab, type = "latex", file = "NLSY_summary.tex")
summTab = xtable(summ_mat, align = "|l|c|c|c|c|c|c|c|c|c|")
print(summTab, type = "latex", file = "NLSY_summary.tex")
missing_prop = seq(10, 90, by = 10)#
ymax = 1.05*max(max(mat, na.rm = TRUE))#
ymin = 0.95*min(min(mat, na.rm = TRUE))
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
std.tr = apply(mat[1:20 , ], 2 , sd, na.rm = TRUE)#
std.mice = apply(mat[21:40 , ], 2 , sd, na.rm = TRUE)#
std.aml = apply(mat[61:60 ,], 2 , sd, na.rm = TRUE)
mat
std.aml = apply(mat[41:60 ,], 2 , sd, na.rm = TRUE)
CI.up.aml = avg.aml + 2*std.aml#
CI.dn.aml = avg.aml - 2*std.aml#
CI.up.mice = avg.mice + 2*std.mice#
CI.dn.mice = avg.mice - 2*std.mice#
CI.up.tr = avg.tr + 2*std.tr#
CI.dn.tr = avg.tr - 2*std.tr
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
x = missing_prop
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')#
lines(missing_prop, AM[1,], type = "p", col = "red")#
lines(missing_prop, AM[2,], type = "p", col = "red")#
lines(missing_prop, AM[3,], type = "p", col = "red")#
lines(missing_prop, AM[4,], type = "p", col = "red")#
lines(missing_prop, AM[5,], type = "p", col = "red")#
lines(missing_prop, AM[6,], type = "p", col = "red")#
lines(missing_prop, AM[7,], type = "p", col = "red")#
lines(missing_prop, AM[8,], type = "p", col = "red")#
lines(missing_prop, AM[9,], type = "p", col = "red")#
lines(missing_prop, AM[10,], type = "p", col = "red")#
lines(missing_prop, AM[11,], type = "p", col = "red")#
lines(missing_prop, AM[12,], type = "p", col = "red")#
lines(missing_prop, AM[13,], type = "p", col = "red")#
lines(missing_prop, AM[14,], type = "p", col = "red")#
lines(missing_prop, AM[15,], type = "p", col = "red")#
lines(missing_prop, AM[16,], type = "p", col = "red")#
lines(missing_prop, AM[17,], type = "p", col = "red")#
lines(missing_prop, AM[18,], type = "p", col = "red")#
lines(missing_prop, AM[19,], type = "p", col = "red")#
lines(missing_prop, AM[20,], type = "p", col = "red")#
#
lines(missing_prop, MC[1,], type = "p", col = "green")#
lines(missing_prop, MC[2,], type = "p", col = "green")#
lines(missing_prop, MC[3,], type = "p", col = "green")#
lines(missing_prop, MC[4,], type = "p", col = "green")#
lines(missing_prop, MC[5,], type = "p", col = "green")#
lines(missing_prop, MC[6,], type = "p", col = "green")#
lines(missing_prop, MC[7,], type = "p", col = "green")#
lines(missing_prop, MC[8,], type = "p", col = "green")#
lines(missing_prop, MC[9,], type = "p", col = "green")#
lines(missing_prop, MC[10,], type = "p", col = "green")#
lines(missing_prop, MC[11,], type = "p", col = "green")#
lines(missing_prop, MC[12,], type = "p", col = "green")#
lines(missing_prop, MC[13,], type = "p", col = "green")#
lines(missing_prop, MC[14,], type = "p", col = "green")#
lines(missing_prop, MC[15,], type = "p", col = "green")#
lines(missing_prop, MC[16,], type = "p", col = "green")#
lines(missing_prop, MC[17,], type = "p", col = "green")#
lines(missing_prop, MC[18,], type = "p", col = "green")#
lines(missing_prop, MC[19,], type = "p", col = "green")#
lines(missing_prop, MC[20,], type = "p", col = "green")#
#
lines(missing_prop, TR[1,], type = "p", col = "blue")#
lines(missing_prop, TR[2,], type = "p", col = "blue")#
lines(missing_prop, TR[3,], type = "p", col = "blue")#
lines(missing_prop, TR[4,], type = "p", col = "blue")#
lines(missing_prop, TR[5,], type = "p", col = "blue")#
lines(missing_prop, TR[6,], type = "p", col = "blue")#
lines(missing_prop, TR[7,], type = "p", col = "blue")#
lines(missing_prop, TR[8,], type = "p", col = "blue")#
lines(missing_prop, TR[9,], type = "p", col = "blue")#
lines(missing_prop, TR[10,], type = "p", col = "blue")#
lines(missing_prop, TR[11,], type = "p", col = "blue")#
lines(missing_prop, TR[12,], type = "p", col = "blue")#
lines(missing_prop, TR[13,], type = "p", col = "blue")#
lines(missing_prop, TR[14,], type = "p", col = "blue")#
lines(missing_prop, TR[15,], type = "p", col = "blue")#
lines(missing_prop, TR[16,], type = "p", col = "blue")#
lines(missing_prop, TR[17,], type = "p", col = "blue")#
lines(missing_prop, TR[18,], type = "p", col = "blue")#
lines(missing_prop, TR[19,], type = "p", col = "blue")#
lines(missing_prop, TR[20,], type = "p", col = "blue")
x = missing_prop #
pdf("sparsity_nlsy_ci.pdf")#
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')#
dev.off()
pdf("sparsity_nlsy_ci_points.pdf")#
#
plot(missing_prop, avg.aml, type = "b", col = rgb(1,0, 0), main = "Sparsity Analysis: NLSY Subset", xlab ="Percentage of entries missing", ylab = "Scaled Loss", xlim = c(10, 90), ylim = c(ymin, ymax ), pch = 19, yaxt = "n")#
arrows(x,CI.dn.aml,x,CI.up.aml,code=3,length=0.2,angle=90,col='red')#
lines(missing_prop, avg.mice,  type = "b", col = rgb(0,1,0), pch = 19)#
arrows(x,CI.dn.mice,x,CI.up.mice,code=3,length=0.2,angle=90,col='green')#
lines(missing_prop, avg.tr, type = "b", col = rgb(0,0,1), pch = 19)#
arrows(x,CI.dn.tr,x,CI.up.tr,code=3,length=0.2,angle=90,col='blue')#
axis(1, at = seq(10, 90, by = 10))#
axis(2, at = seq(10000, 200000, by = 50000))#
legend("topleft", c("Amelia", "MICE", "Trace"),col =  c("red", "green", "blue"), lty = 1, pch = 19 ,pt.bg = 'white')#
lines(missing_prop, AM[1,], type = "p", col = "red")#
lines(missing_prop, AM[2,], type = "p", col = "red")#
lines(missing_prop, AM[3,], type = "p", col = "red")#
lines(missing_prop, AM[4,], type = "p", col = "red")#
lines(missing_prop, AM[5,], type = "p", col = "red")#
lines(missing_prop, AM[6,], type = "p", col = "red")#
lines(missing_prop, AM[7,], type = "p", col = "red")#
lines(missing_prop, AM[8,], type = "p", col = "red")#
lines(missing_prop, AM[9,], type = "p", col = "red")#
lines(missing_prop, AM[10,], type = "p", col = "red")#
lines(missing_prop, AM[11,], type = "p", col = "red")#
lines(missing_prop, AM[12,], type = "p", col = "red")#
lines(missing_prop, AM[13,], type = "p", col = "red")#
lines(missing_prop, AM[14,], type = "p", col = "red")#
lines(missing_prop, AM[15,], type = "p", col = "red")#
lines(missing_prop, AM[16,], type = "p", col = "red")#
lines(missing_prop, AM[17,], type = "p", col = "red")#
lines(missing_prop, AM[18,], type = "p", col = "red")#
lines(missing_prop, AM[19,], type = "p", col = "red")#
lines(missing_prop, AM[20,], type = "p", col = "red")#
#
lines(missing_prop, MC[1,], type = "p", col = "green")#
lines(missing_prop, MC[2,], type = "p", col = "green")#
lines(missing_prop, MC[3,], type = "p", col = "green")#
lines(missing_prop, MC[4,], type = "p", col = "green")#
lines(missing_prop, MC[5,], type = "p", col = "green")#
lines(missing_prop, MC[6,], type = "p", col = "green")#
lines(missing_prop, MC[7,], type = "p", col = "green")#
lines(missing_prop, MC[8,], type = "p", col = "green")#
lines(missing_prop, MC[9,], type = "p", col = "green")#
lines(missing_prop, MC[10,], type = "p", col = "green")#
lines(missing_prop, MC[11,], type = "p", col = "green")#
lines(missing_prop, MC[12,], type = "p", col = "green")#
lines(missing_prop, MC[13,], type = "p", col = "green")#
lines(missing_prop, MC[14,], type = "p", col = "green")#
lines(missing_prop, MC[15,], type = "p", col = "green")#
lines(missing_prop, MC[16,], type = "p", col = "green")#
lines(missing_prop, MC[17,], type = "p", col = "green")#
lines(missing_prop, MC[18,], type = "p", col = "green")#
lines(missing_prop, MC[19,], type = "p", col = "green")#
lines(missing_prop, MC[20,], type = "p", col = "green")#
#
lines(missing_prop, TR[1,], type = "p", col = "blue")#
lines(missing_prop, TR[2,], type = "p", col = "blue")#
lines(missing_prop, TR[3,], type = "p", col = "blue")#
lines(missing_prop, TR[4,], type = "p", col = "blue")#
lines(missing_prop, TR[5,], type = "p", col = "blue")#
lines(missing_prop, TR[6,], type = "p", col = "blue")#
lines(missing_prop, TR[7,], type = "p", col = "blue")#
lines(missing_prop, TR[8,], type = "p", col = "blue")#
lines(missing_prop, TR[9,], type = "p", col = "blue")#
lines(missing_prop, TR[10,], type = "p", col = "blue")#
lines(missing_prop, TR[11,], type = "p", col = "blue")#
lines(missing_prop, TR[12,], type = "p", col = "blue")#
lines(missing_prop, TR[13,], type = "p", col = "blue")#
lines(missing_prop, TR[14,], type = "p", col = "blue")#
lines(missing_prop, TR[15,], type = "p", col = "blue")#
lines(missing_prop, TR[16,], type = "p", col = "blue")#
lines(missing_prop, TR[17,], type = "p", col = "blue")#
lines(missing_prop, TR[18,], type = "p", col = "blue")#
lines(missing_prop, TR[19,], type = "p", col = "blue")#
lines(missing_prop, TR[20,], type = "p", col = "blue")#
#
dev.off()
# given dataframe df , list of categoricals cat1, imputed dataset IMP#
#
library("xtable")#
#
rm(list = ls())#
#
###Calculating scaled loss given original data df.base, categorical columns cat1, imputed dataset IMP#
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to markix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping rkack of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		if(!is.na(df.base[r,c])){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} }#
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ){#
    	if(!is.na(df.base[r,c])){#
    	l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}}#
	#	print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l/length(s), lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/Data")#
#
df.base = read.csv("NLSYcleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("NLSYcategoricals.csv")[, -1]#
ord1 = read.csv("NLSYordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
l.rk10 = numeric()#
l.rk20 = numeric()#
l.rk30 = numeric()#
l.rk40 = numeric()#
l.rk50 = numeric()#
l.rk60 = numeric()#
l.rk70 = numeric()#
l.rk80 = numeric()#
l.rk90 = numeric()#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/RANK")#
######## 10#
#
glrm1 =  read.csv("Rank_NLSY10_MI.csv")#
glrm2 =  read.csv("Rank_NLSY10_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY10_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY10_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY10_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY10_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY10_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY10_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY10_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY10_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY10_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY10_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY10_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY10_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY10_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY10_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY10_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY10_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY10_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY10_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s10.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s10 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s10 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s10 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s10 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s10 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s10 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s10 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s10 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s10 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s10 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s10 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s10 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s10 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s10 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s10 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s10 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s10 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s10 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s10 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk10 = c(l.rk10, LOSS.RK1$loss)#
l.rk10 = c(l.rk10, LOSS.RK2$loss)#
l.rk10 = c(l.rk10, LOSS.RK3$loss)#
l.rk10 = c(l.rk10, LOSS.RK4$loss)#
l.rk10 = c(l.rk10, LOSS.RK5$loss)#
l.rk10 = c(l.rk10, LOSS.RK6$loss)#
l.rk10 = c(l.rk10, LOSS.RK7$loss)#
l.rk10 = c(l.rk10, LOSS.RK8$loss)#
l.rk10 = c(l.rk10, LOSS.RK9$loss)#
l.rk10 = c(l.rk10, LOSS.RK10$loss)#
l.rk10 = c(l.rk10, LOSS.RK11$loss)#
l.rk10 = c(l.rk10, LOSS.RK12$loss)#
l.rk10 = c(l.rk10, LOSS.RK13$loss)#
l.rk10 = c(l.rk10, LOSS.RK14$loss)#
l.rk10 = c(l.rk10, LOSS.RK15$loss)#
l.rk10 = c(l.rk10, LOSS.RK16$loss)#
l.rk10 = c(l.rk10, LOSS.RK17$loss)#
l.rk10 = c(l.rk10, LOSS.RK18$loss)#
l.rk10 = c(l.rk10, LOSS.RK19$loss)#
l.rk10 = c(l.rk10, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 20#
#
glrm1 =  read.csv("Rank_NLSY20_MI.csv")#
glrm2 =  read.csv("Rank_NLSY20_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY20_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY20_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY20_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY20_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY20_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY20_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY20_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY20_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY20_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY20_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY20_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY20_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY20_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY20_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY20_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY20_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY20_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY20_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s20.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s20 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s20 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s20 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s20 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s20 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s20 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s20 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s20 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s20 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s20 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s20 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s20 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s20 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s20 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s20 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s20 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s20 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s20 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s20 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )
l.rk10 = c(l.rk10, LOSS.RK1$loss)#
l.rk10 = c(l.rk10, LOSS.RK2$loss)#
l.rk10 = c(l.rk10, LOSS.RK3$loss)#
l.rk10 = c(l.rk10, LOSS.RK4$loss)#
l.rk10 = c(l.rk10, LOSS.RK5$loss)#
l.rk10 = c(l.rk10, LOSS.RK6$loss)#
l.rk10 = c(l.rk10, LOSS.RK7$loss)#
l.rk10 = c(l.rk10, LOSS.RK8$loss)#
l.rk10 = c(l.rk10, LOSS.RK9$loss)#
l.rk10 = c(l.rk10, LOSS.RK10$loss)#
l.rk10 = c(l.rk10, LOSS.RK11$loss)#
l.rk10 = c(l.rk10, LOSS.RK12$loss)#
l.rk10 = c(l.rk10, LOSS.RK13$loss)#
l.rk10 = c(l.rk10, LOSS.RK14$loss)#
l.rk10 = c(l.rk10, LOSS.RK15$loss)#
l.rk10 = c(l.rk10, LOSS.RK16$loss)#
l.rk10 = c(l.rk10, LOSS.RK17$loss)#
l.rk10 = c(l.rk10, LOSS.RK18$loss)#
l.rk10 = c(l.rk10, LOSS.RK19$loss)#
l.rk10 = c(l.rk10, LOSS.RK20$loss)
l.rk10
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )
glrm1 =  read.csv("Rank_NLSY20_MI.csv")#
glrm2 =  read.csv("Rank_NLSY20_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY20_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY20_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY20_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY20_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY20_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY20_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY20_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY20_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY20_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY20_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY20_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY20_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY20_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY20_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY20_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY20_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY20_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY20_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s20.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s20 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s20 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s20 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s20 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s20 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s20 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s20 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s20 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s20 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s20 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s20 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s20 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s20 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s20 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s20 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s20 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s20 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s20 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s20 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk20 = c(l.rk20, LOSS.RK1$loss)#
l.rk20 = c(l.rk20, LOSS.RK2$loss)#
l.rk20 = c(l.rk20, LOSS.RK3$loss)#
l.rk20 = c(l.rk20, LOSS.RK4$loss)#
l.rk20 = c(l.rk20, LOSS.RK5$loss)#
l.rk20 = c(l.rk20, LOSS.RK6$loss)#
l.rk20 = c(l.rk20, LOSS.RK7$loss)#
l.rk20 = c(l.rk20, LOSS.RK8$loss)#
l.rk20 = c(l.rk20, LOSS.RK9$loss)#
l.rk20 = c(l.rk20, LOSS.RK10$loss)#
l.rk20 = c(l.rk20, LOSS.RK11$loss)#
l.rk20 = c(l.rk20, LOSS.RK12$loss)#
l.rk20 = c(l.rk20, LOSS.RK13$loss)#
l.rk20 = c(l.rk20, LOSS.RK14$loss)#
l.rk20 = c(l.rk20, LOSS.RK15$loss)#
l.rk20 = c(l.rk20, LOSS.RK16$loss)#
l.rk20 = c(l.rk20, LOSS.RK17$loss)#
l.rk20 = c(l.rk20, LOSS.RK18$loss)#
l.rk20 = c(l.rk20, LOSS.RK19$loss)#
l.rk20 = c(l.rk20, LOSS.RK20$loss)
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )
######## 30#
#
glrm1 =  read.csv("Rank_NLSY30_MI.csv")#
glrm2 =  read.csv("Rank_NLSY30_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY30_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY30_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY30_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY30_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY30_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY30_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY30_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY30_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY30_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY30_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY30_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY30_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY30_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY30_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY30_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY30_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY30_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY30_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s30.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s30 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s30 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s30 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s30 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s30 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s30 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s30 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s30 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s30 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s30 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s30 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s30 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s30 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s30 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s30 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s30 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s30 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s30 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s30 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk30 = c(l.rk30, LOSS.RK1$loss)#
l.rk30 = c(l.rk30, LOSS.RK2$loss)#
l.rk30 = c(l.rk30, LOSS.RK3$loss)#
l.rk30 = c(l.rk30, LOSS.RK4$loss)#
l.rk30 = c(l.rk30, LOSS.RK5$loss)#
l.rk30 = c(l.rk30, LOSS.RK6$loss)#
l.rk30 = c(l.rk30, LOSS.RK7$loss)#
l.rk30 = c(l.rk30, LOSS.RK8$loss)#
l.rk30 = c(l.rk30, LOSS.RK9$loss)#
l.rk30 = c(l.rk30, LOSS.RK10$loss)#
l.rk30 = c(l.rk30, LOSS.RK11$loss)#
l.rk30 = c(l.rk30, LOSS.RK12$loss)#
l.rk30 = c(l.rk30, LOSS.RK13$loss)#
l.rk30 = c(l.rk30, LOSS.RK14$loss)#
l.rk30 = c(l.rk30, LOSS.RK15$loss)#
l.rk30 = c(l.rk30, LOSS.RK16$loss)#
l.rk30 = c(l.rk30, LOSS.RK17$loss)#
l.rk30 = c(l.rk30, LOSS.RK18$loss)#
l.rk30 = c(l.rk30, LOSS.RK19$loss)#
l.rk30 = c(l.rk30, LOSS.RK20$loss)
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 40#
#
glrm1 =  read.csv("Rank_NLSY40_MI.csv")#
glrm2 =  read.csv("Rank_NLSY40_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY40_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY40_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY40_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY40_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY40_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY40_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY40_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY40_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY40_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY40_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY40_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY40_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY40_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY40_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY40_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY40_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY40_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY40_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s40.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s40 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s40 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s40 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s40 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s40 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s40 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s40 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s40 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s40 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s40 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s40 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s40 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s40 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s40 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s40 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s40 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s40 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s40 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s40 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk40 = c(l.rk40, LOSS.RK1$loss)#
l.rk40 = c(l.rk40, LOSS.RK2$loss)#
l.rk40 = c(l.rk40, LOSS.RK3$loss)#
l.rk40 = c(l.rk40, LOSS.RK4$loss)#
l.rk40 = c(l.rk40, LOSS.RK5$loss)#
l.rk40 = c(l.rk40, LOSS.RK6$loss)#
l.rk40 = c(l.rk40, LOSS.RK7$loss)#
l.rk40 = c(l.rk40, LOSS.RK8$loss)#
l.rk40 = c(l.rk40, LOSS.RK9$loss)#
l.rk40 = c(l.rk40, LOSS.RK10$loss)#
l.rk40 = c(l.rk40, LOSS.RK11$loss)#
l.rk40 = c(l.rk40, LOSS.RK12$loss)#
l.rk40 = c(l.rk40, LOSS.RK13$loss)#
l.rk40 = c(l.rk40, LOSS.RK14$loss)#
l.rk40 = c(l.rk40, LOSS.RK15$loss)#
l.rk40 = c(l.rk40, LOSS.RK16$loss)#
l.rk40 = c(l.rk40, LOSS.RK17$loss)#
l.rk40 = c(l.rk40, LOSS.RK18$loss)#
l.rk40 = c(l.rk40, LOSS.RK19$loss)#
l.rk40 = c(l.rk40, LOSS.RK20$loss)
l.rk40
l.rk10
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 50#
#
glrm1 =  read.csv("Rank_NLSY50_MI.csv")#
glrm2 =  read.csv("Rank_NLSY50_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY50_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY50_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY50_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY50_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY50_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY50_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY50_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY50_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY50_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY50_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY50_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY50_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY50_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY50_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY50_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY50_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY50_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY50_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s50.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s50 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s50 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s50 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s50 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s50 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s50 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s50 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s50 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s50 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s50 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s50 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s50 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s50 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s50 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s50 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s50 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s50 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s50 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s50 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk50 = c(l.rk50, LOSS.RK1$loss)#
l.rk50 = c(l.rk50, LOSS.RK2$loss)#
l.rk50 = c(l.rk50, LOSS.RK3$loss)#
l.rk50 = c(l.rk50, LOSS.RK4$loss)#
l.rk50 = c(l.rk50, LOSS.RK5$loss)#
l.rk50 = c(l.rk50, LOSS.RK6$loss)#
l.rk50 = c(l.rk50, LOSS.RK7$loss)#
l.rk50 = c(l.rk50, LOSS.RK8$loss)#
l.rk50 = c(l.rk50, LOSS.RK9$loss)#
l.rk50 = c(l.rk50, LOSS.RK10$loss)#
l.rk50 = c(l.rk50, LOSS.RK11$loss)#
l.rk50 = c(l.rk50, LOSS.RK12$loss)#
l.rk50 = c(l.rk50, LOSS.RK13$loss)#
l.rk50 = c(l.rk50, LOSS.RK14$loss)#
l.rk50 = c(l.rk50, LOSS.RK15$loss)#
l.rk50 = c(l.rk50, LOSS.RK16$loss)#
l.rk50 = c(l.rk50, LOSS.RK17$loss)#
l.rk50 = c(l.rk50, LOSS.RK18$loss)#
l.rk50 = c(l.rk50, LOSS.RK19$loss)#
l.rk50 = c(l.rk50, LOSS.RK20$loss)
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 60#
#
glrm1 =  read.csv("Rank_NLSY60_MI.csv")#
glrm2 =  read.csv("Rank_NLSY60_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY60_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY60_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY60_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY60_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY60_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY60_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY60_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY60_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY60_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY60_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY60_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY60_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY60_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY60_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY60_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY60_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY60_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY60_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s60.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s60 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s60 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s60 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s60 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s60 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s60 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s60 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s60 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s60 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s60 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s60 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s60 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s60 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s60 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s60 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s60 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s60 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s60 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s60 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk60 = c(l.rk60, LOSS.RK1$loss)#
l.rk60 = c(l.rk60, LOSS.RK2$loss)#
l.rk60 = c(l.rk60, LOSS.RK3$loss)#
l.rk60 = c(l.rk60, LOSS.RK4$loss)#
l.rk60 = c(l.rk60, LOSS.RK5$loss)#
l.rk60 = c(l.rk60, LOSS.RK6$loss)#
l.rk60 = c(l.rk60, LOSS.RK7$loss)#
l.rk60 = c(l.rk60, LOSS.RK8$loss)#
l.rk60 = c(l.rk60, LOSS.RK9$loss)#
l.rk60 = c(l.rk60, LOSS.RK10$loss)#
l.rk60 = c(l.rk60, LOSS.RK11$loss)#
l.rk60 = c(l.rk60, LOSS.RK12$loss)#
l.rk60 = c(l.rk60, LOSS.RK13$loss)#
l.rk60 = c(l.rk60, LOSS.RK14$loss)#
l.rk60 = c(l.rk60, LOSS.RK15$loss)#
l.rk60 = c(l.rk60, LOSS.RK16$loss)#
l.rk60 = c(l.rk60, LOSS.RK17$loss)#
l.rk60 = c(l.rk60, LOSS.RK18$loss)#
l.rk60 = c(l.rk60, LOSS.RK19$loss)#
l.rk60 = c(l.rk60, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 70#
#
glrm1 =  read.csv("Rank_NLSY70_MI.csv")#
glrm2 =  read.csv("Rank_NLSY70_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY70_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY70_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY70_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY70_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY70_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY70_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY70_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY70_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY70_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY70_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY70_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY70_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY70_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY70_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY70_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY70_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY70_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY70_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s70.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s70 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s70 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s70 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s70 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s70 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s70 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s70 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s70 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s70 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s70 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s70 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s70 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s70 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s70 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s70 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s70 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s70 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s70 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s70 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk70 = c(l.rk70, LOSS.RK1$loss)#
l.rk70 = c(l.rk70, LOSS.RK2$loss)#
l.rk70 = c(l.rk70, LOSS.RK3$loss)#
l.rk70 = c(l.rk70, LOSS.RK4$loss)#
l.rk70 = c(l.rk70, LOSS.RK5$loss)#
l.rk70 = c(l.rk70, LOSS.RK6$loss)#
l.rk70 = c(l.rk70, LOSS.RK7$loss)#
l.rk70 = c(l.rk70, LOSS.RK8$loss)#
l.rk70 = c(l.rk70, LOSS.RK9$loss)#
l.rk70 = c(l.rk70, LOSS.RK10$loss)#
l.rk70 = c(l.rk70, LOSS.RK11$loss)#
l.rk70 = c(l.rk70, LOSS.RK12$loss)#
l.rk70 = c(l.rk70, LOSS.RK13$loss)#
l.rk70 = c(l.rk70, LOSS.RK14$loss)#
l.rk70 = c(l.rk70, LOSS.RK15$loss)#
l.rk70 = c(l.rk70, LOSS.RK16$loss)#
l.rk70 = c(l.rk70, LOSS.RK17$loss)#
l.rk70 = c(l.rk70, LOSS.RK18$loss)#
l.rk70 = c(l.rk70, LOSS.RK19$loss)#
l.rk70 = c(l.rk70, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 80#
#
glrm1 =  read.csv("Rank_NLSY80_MI.csv")#
glrm2 =  read.csv("Rank_NLSY80_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY80_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY80_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY80_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY80_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY80_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY80_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY80_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY80_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY80_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY80_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY80_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY80_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY80_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY80_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY80_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY80_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY80_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY80_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s80.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s80 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s80 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s80 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s80 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s80 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s80 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s80 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s80 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s80 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s80 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s80 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s80 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s80 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s80 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s80 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s80 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s80 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s80 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s80 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk80 = c(l.rk80, LOSS.RK1$loss)#
l.rk80 = c(l.rk80, LOSS.RK2$loss)#
l.rk80 = c(l.rk80, LOSS.RK3$loss)#
l.rk80 = c(l.rk80, LOSS.RK4$loss)#
l.rk80 = c(l.rk80, LOSS.RK5$loss)#
l.rk80 = c(l.rk80, LOSS.RK6$loss)#
l.rk80 = c(l.rk80, LOSS.RK7$loss)#
l.rk80 = c(l.rk80, LOSS.RK8$loss)#
l.rk80 = c(l.rk80, LOSS.RK9$loss)#
l.rk80 = c(l.rk80, LOSS.RK10$loss)#
l.rk80 = c(l.rk80, LOSS.RK11$loss)#
l.rk80 = c(l.rk80, LOSS.RK12$loss)#
l.rk80 = c(l.rk80, LOSS.RK13$loss)#
l.rk80 = c(l.rk80, LOSS.RK14$loss)#
l.rk80 = c(l.rk80, LOSS.RK15$loss)#
l.rk80 = c(l.rk80, LOSS.RK16$loss)#
l.rk80 = c(l.rk80, LOSS.RK17$loss)#
l.rk80 = c(l.rk80, LOSS.RK18$loss)#
l.rk80 = c(l.rk80, LOSS.RK19$loss)#
l.rk80 = c(l.rk80, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 90#
#
glrm1 =  read.csv("Rank_NLSY90_MI.csv")#
glrm2 =  read.csv("Rank_NLSY90_MI (1).csv")#
glrm3 =  read.csv("Rank_NLSY90_MI (2).csv")#
glrm4 =  read.csv("Rank_NLSY90_MI (3).csv")#
glrm5 =  read.csv("Rank_NLSY90_MI (4).csv")#
glrm6 =  read.csv("Rank_NLSY90_MI (5).csv")#
glrm7 =  read.csv("Rank_NLSY90_MI (6).csv")#
glrm8 =  read.csv("Rank_NLSY90_MI (7).csv")#
glrm9 =  read.csv("Rank_NLSY90_MI (8).csv")#
glrm10 = read.csv("Rank_NLSY90_MI (9).csv")#
glrm11 = read.csv("Rank_NLSY90_MI (10).csv")#
glrm12 = read.csv("Rank_NLSY90_MI (11).csv")#
glrm13 = read.csv("Rank_NLSY90_MI (12).csv")#
glrm14 = read.csv("Rank_NLSY90_MI (13).csv")#
glrm15 = read.csv("Rank_NLSY90_MI (14).csv")#
glrm16 = read.csv("Rank_NLSY90_MI (15).csv")#
glrm17 = read.csv("Rank_NLSY90_MI (16).csv")#
glrm18 = read.csv("Rank_NLSY90_MI (17).csv")#
glrm19 = read.csv("Rank_NLSY90_MI (18).csv")#
glrm20 = read.csv("Rank_NLSY90_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s90.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s90 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s90 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s90 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s90 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s90 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s90 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s90 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s90 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s90 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s90 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s90 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s90 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s90 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s90 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s90 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s90 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s90 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s90 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s90 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk90 = c(l.rk90, LOSS.RK1$loss)#
l.rk90 = c(l.rk90, LOSS.RK2$loss)#
l.rk90 = c(l.rk90, LOSS.RK3$loss)#
l.rk90 = c(l.rk90, LOSS.RK4$loss)#
l.rk90 = c(l.rk90, LOSS.RK5$loss)#
l.rk90 = c(l.rk90, LOSS.RK6$loss)#
l.rk90 = c(l.rk90, LOSS.RK7$loss)#
l.rk90 = c(l.rk90, LOSS.RK8$loss)#
l.rk90 = c(l.rk90, LOSS.RK9$loss)#
l.rk90 = c(l.rk90, LOSS.RK10$loss)#
l.rk90 = c(l.rk90, LOSS.RK11$loss)#
l.rk90 = c(l.rk90, LOSS.RK12$loss)#
l.rk90 = c(l.rk90, LOSS.RK13$loss)#
l.rk90 = c(l.rk90, LOSS.RK14$loss)#
l.rk90 = c(l.rk90, LOSS.RK15$loss)#
l.rk90 = c(l.rk90, LOSS.RK16$loss)#
l.rk90 = c(l.rk90, LOSS.RK17$loss)#
l.rk90 = c(l.rk90, LOSS.RK18$loss)#
l.rk90 = c(l.rk90, LOSS.RK19$loss)#
l.rk90 = c(l.rk90, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )
save(l.rk10, l.rk20, l.rk30, l.rk40, l.rk50, l.rk60, l.rk70, l.rk80, l.rk90 , file = "rank_consistency.RData")
rm(list = ls())#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/AMELIA/")#
load('amelia_consistency.RData')#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/MICE/")#
load('mice_consistency.RData')#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/TRACE/")#
load('trace_consistency.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/RANK/")#
load('trace_consistency.RData')#
RK = cbind(l.rk10, l.rk20, l.rk30, l.rk40, l.rk50, l.rk60, l.rk70, l.rk80, l.rk90)
rm(list = ls())#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/AMELIA/")#
load('amelia_consistency.RData')#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/MICE/")#
load('mice_consistency.RData')#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/TRACE/")#
load('trace_consistency.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/RANK/")#
load('rank_consistency.RData')#
RK = cbind(l.rk10, l.rk20, l.rk30, l.rk40, l.rk50, l.rk60, l.rk70, l.rk80, l.rk90)
RK
l.rk10
l.rk20
l.rk30
l.rk40
l.rk50
l.rk60
l.rk70
l.rk80
l.rk90
rm(list = ls())#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/AMELIA/")#
load('amelia_consistency.RData')#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/MICE/")#
load('mice_consistency.RData')#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/TRACE/")#
load('trace_consistency.RData')#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/RANK/")#
load('rank_consistency.RData')#
RK = cbind(l.rk10[1:20], l.rk20, l.rk30, l.rk40, l.rk50, l.rk60, l.rk70, l.rk80, l.rk90)#
#
TR = cbind(l.tr10, l.tr20, l.tr30, l.tr40, l.tr50, l.tr60, l.tr70, l.tr80, c(l.tr90, NA))#
MC = cbind(l.mice10, l.mice20, l.mice30, l.mice40, l.mice50, l.mice60, l.mice70, l.mice80, l.mice90)#
AM = cbind(l.aml10, l.aml20, l.aml30, l.aml40, l.aml50, c(l.aml60, NA), l.aml70, l.aml80, l.aml90)#
#
mat = rbind(RK, TR, MC, AM)#
rownames(mat) = c(rep("rank", 20),rep("trace", 20), rep("mice", 20), rep("amelia", 18))#
colnames(mat) = c("10%", "20%","30%","40%","50%","60%","70%","80%","90%")#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/NLSY/Comparisons")#
#write.csv(mat, "NLSYsparsitycomp.csv")#
#
#mat = read.csv("NLSYsparsitycomp.csv")#
#mat = mat[,-1]#
#
avg.rk = apply(mat[1:20 ,], 2 , mean, na.rm = TRUE)#
avg.tr = apply(mat[21:40 ,], 2 , mean, na.rm = TRUE)#
avg.mice = apply(mat[41:60 , ], 2 , mean, na.rm = TRUE)#
avg.aml = apply(mat[61:78 ,], 2 , mean, na.rm = TRUE)#
imp.mice.tr = 100*((avg.mice- avg.tr)/avg.mice)#
imp.aml.tr = 100*(avg.aml- avg.tr)/avg.aml#
imp.mice.rk = 100*((avg.mice- avg.tk)/avg.mice)#
imp.aml.rk = 100*(avg.aml- avg.tk)/avg.aml#
#
prop.na = function(vec){#
	prop.na = 100*(sum(is.na(vec))/length(vec))#
}#
#
prop.na.aml = apply(AM, 2, prop.na)#
prop.na.mice = apply(MC, 2, prop.na)#
prop.na.tr = apply(TR, 2, prop.na)#
prop.na.rk = apply(RK, 2, prop.na)#
summ_mat = round(rbind(avg.aml, prop.na.aml , avg.mice, prop.na.mice , avg.tr, #
 prop.na.tr,avg.rk, #
 prop.na.rk, imp.aml.tr, imp.mice.tr, imp.aml.rk, imp.mice.rk), 2)
imp.mice.rk = 100*((avg.mice- avg.rk)/avg.mice)#
imp.aml.rk = 100*(avg.aml- avg.rk)/avg.aml
summ_mat = round(rbind(avg.aml, prop.na.aml , avg.mice, prop.na.mice , avg.tr, #
 prop.na.tr,avg.rk, #
 prop.na.rk, imp.aml.tr, imp.mice.tr, imp.aml.rk, imp.mice.rk), 2)
summ_mat
l.mice20
l.rk20
l.tr20
l.am20
l.aml20
# given dataframe df , list of categoricals cat1, imputed dataset IMP#
#
library("xtable")#
#
rm(list = ls())#
#
###Calculating scaled loss given original data df.base, categorical columns cat1, imputed dataset IMP#
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to markix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping rkack of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		if(!is.na(df.base[r,c])){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} }#
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ){#
    	if(!is.na(df.base[r,c])){#
    	l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}}#
	#	print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l/length(s), lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/GSS/Data")#
#
df.base = read.csv("GSScleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("GSScategoricals.csv")[, -1]#
ord1 = read.csv("GSSordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))#
l.rk10 = numeric()#
l.rk20 = numeric()#
l.rk30 = numeric()#
l.rk40 = numeric()#
l.rk50 = numeric()#
l.rk60 = numeric()#
l.rk70 = numeric()#
l.rk80 = numeric()#
l.rk90 = numeric()#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/GSS/RANK")#
######## 10#
#
glrm1 =  read.csv("Rank_GSS10_MI.csv")#
glrm2 =  read.csv("Rank_GSS10_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS10_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS10_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS10_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS10_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS10_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS10_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS10_MI (8).csv")#
glrm10 = read.csv("Rank_GSS10_MI (9).csv")#
glrm11 = read.csv("Rank_GSS10_MI (10).csv")#
glrm12 = read.csv("Rank_GSS10_MI (11).csv")#
glrm13 = read.csv("Rank_GSS10_MI (12).csv")#
glrm14 = read.csv("Rank_GSS10_MI (13).csv")#
glrm15 = read.csv("Rank_GSS10_MI (14).csv")#
glrm16 = read.csv("Rank_GSS10_MI (15).csv")#
glrm17 = read.csv("Rank_GSS10_MI (16).csv")#
glrm18 = read.csv("Rank_GSS10_MI (17).csv")#
glrm19 = read.csv("Rank_GSS10_MI (18).csv")#
glrm20 = read.csv("Rank_GSS10_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s10.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s10 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s10 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s10 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s10 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s10 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s10 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s10 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s10 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s10 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s10 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s10 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s10 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s10 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s10 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s10 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s10 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s10 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s10 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s10 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk10 = c(l.rk10, LOSS.RK1$loss)#
l.rk10 = c(l.rk10, LOSS.RK2$loss)#
l.rk10 = c(l.rk10, LOSS.RK3$loss)#
l.rk10 = c(l.rk10, LOSS.RK4$loss)#
l.rk10 = c(l.rk10, LOSS.RK5$loss)#
l.rk10 = c(l.rk10, LOSS.RK6$loss)#
l.rk10 = c(l.rk10, LOSS.RK7$loss)#
l.rk10 = c(l.rk10, LOSS.RK8$loss)#
l.rk10 = c(l.rk10, LOSS.RK9$loss)#
l.rk10 = c(l.rk10, LOSS.RK10$loss)#
l.rk10 = c(l.rk10, LOSS.RK11$loss)#
l.rk10 = c(l.rk10, LOSS.RK12$loss)#
l.rk10 = c(l.rk10, LOSS.RK13$loss)#
l.rk10 = c(l.rk10, LOSS.RK14$loss)#
l.rk10 = c(l.rk10, LOSS.RK15$loss)#
l.rk10 = c(l.rk10, LOSS.RK16$loss)#
l.rk10 = c(l.rk10, LOSS.RK17$loss)#
l.rk10 = c(l.rk10, LOSS.RK18$loss)#
l.rk10 = c(l.rk10, LOSS.RK19$loss)#
l.rk10 = c(l.rk10, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 20#
#
glrm1 =  read.csv("Rank_GSS20_MI.csv")#
glrm2 =  read.csv("Rank_GSS20_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS20_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS20_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS20_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS20_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS20_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS20_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS20_MI (8).csv")#
glrm10 = read.csv("Rank_GSS20_MI (9).csv")#
glrm11 = read.csv("Rank_GSS20_MI (10).csv")#
glrm12 = read.csv("Rank_GSS20_MI (11).csv")#
glrm13 = read.csv("Rank_GSS20_MI (12).csv")#
glrm14 = read.csv("Rank_GSS20_MI (13).csv")#
glrm15 = read.csv("Rank_GSS20_MI (14).csv")#
glrm16 = read.csv("Rank_GSS20_MI (15).csv")#
glrm17 = read.csv("Rank_GSS20_MI (16).csv")#
glrm18 = read.csv("Rank_GSS20_MI (17).csv")#
glrm19 = read.csv("Rank_GSS20_MI (18).csv")#
glrm20 = read.csv("Rank_GSS20_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s20.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s20 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s20 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s20 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s20 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s20 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s20 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s20 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s20 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s20 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s20 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s20 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s20 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s20 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s20 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s20 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s20 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s20 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s20 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s20 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk20 = c(l.rk20, LOSS.RK1$loss)#
l.rk20 = c(l.rk20, LOSS.RK2$loss)#
l.rk20 = c(l.rk20, LOSS.RK3$loss)#
l.rk20 = c(l.rk20, LOSS.RK4$loss)#
l.rk20 = c(l.rk20, LOSS.RK5$loss)#
l.rk20 = c(l.rk20, LOSS.RK6$loss)#
l.rk20 = c(l.rk20, LOSS.RK7$loss)#
l.rk20 = c(l.rk20, LOSS.RK8$loss)#
l.rk20 = c(l.rk20, LOSS.RK9$loss)#
l.rk20 = c(l.rk20, LOSS.RK10$loss)#
l.rk20 = c(l.rk20, LOSS.RK11$loss)#
l.rk20 = c(l.rk20, LOSS.RK12$loss)#
l.rk20 = c(l.rk20, LOSS.RK13$loss)#
l.rk20 = c(l.rk20, LOSS.RK14$loss)#
l.rk20 = c(l.rk20, LOSS.RK15$loss)#
l.rk20 = c(l.rk20, LOSS.RK16$loss)#
l.rk20 = c(l.rk20, LOSS.RK17$loss)#
l.rk20 = c(l.rk20, LOSS.RK18$loss)#
l.rk20 = c(l.rk20, LOSS.RK19$loss)#
l.rk20 = c(l.rk20, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 30#
#
glrm1 =  read.csv("Rank_GSS30_MI.csv")#
glrm2 =  read.csv("Rank_GSS30_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS30_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS30_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS30_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS30_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS30_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS30_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS30_MI (8).csv")#
glrm10 = read.csv("Rank_GSS30_MI (9).csv")#
glrm11 = read.csv("Rank_GSS30_MI (10).csv")#
glrm12 = read.csv("Rank_GSS30_MI (11).csv")#
glrm13 = read.csv("Rank_GSS30_MI (12).csv")#
glrm14 = read.csv("Rank_GSS30_MI (13).csv")#
glrm15 = read.csv("Rank_GSS30_MI (14).csv")#
glrm16 = read.csv("Rank_GSS30_MI (15).csv")#
glrm17 = read.csv("Rank_GSS30_MI (16).csv")#
glrm18 = read.csv("Rank_GSS30_MI (17).csv")#
glrm19 = read.csv("Rank_GSS30_MI (18).csv")#
glrm20 = read.csv("Rank_GSS30_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s30.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s30 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s30 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s30 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s30 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s30 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s30 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s30 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s30 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s30 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s30 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s30 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s30 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s30 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s30 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s30 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s30 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s30 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s30 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s30 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk30 = c(l.rk30, LOSS.RK1$loss)#
l.rk30 = c(l.rk30, LOSS.RK2$loss)#
l.rk30 = c(l.rk30, LOSS.RK3$loss)#
l.rk30 = c(l.rk30, LOSS.RK4$loss)#
l.rk30 = c(l.rk30, LOSS.RK5$loss)#
l.rk30 = c(l.rk30, LOSS.RK6$loss)#
l.rk30 = c(l.rk30, LOSS.RK7$loss)#
l.rk30 = c(l.rk30, LOSS.RK8$loss)#
l.rk30 = c(l.rk30, LOSS.RK9$loss)#
l.rk30 = c(l.rk30, LOSS.RK10$loss)#
l.rk30 = c(l.rk30, LOSS.RK11$loss)#
l.rk30 = c(l.rk30, LOSS.RK12$loss)#
l.rk30 = c(l.rk30, LOSS.RK13$loss)#
l.rk30 = c(l.rk30, LOSS.RK14$loss)#
l.rk30 = c(l.rk30, LOSS.RK15$loss)#
l.rk30 = c(l.rk30, LOSS.RK16$loss)#
l.rk30 = c(l.rk30, LOSS.RK17$loss)#
l.rk30 = c(l.rk30, LOSS.RK18$loss)#
l.rk30 = c(l.rk30, LOSS.RK19$loss)#
l.rk30 = c(l.rk30, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 40#
#
glrm1 =  read.csv("Rank_GSS40_MI.csv")#
glrm2 =  read.csv("Rank_GSS40_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS40_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS40_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS40_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS40_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS40_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS40_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS40_MI (8).csv")#
glrm10 = read.csv("Rank_GSS40_MI (9).csv")#
glrm11 = read.csv("Rank_GSS40_MI (10).csv")#
glrm12 = read.csv("Rank_GSS40_MI (11).csv")#
glrm13 = read.csv("Rank_GSS40_MI (12).csv")#
glrm14 = read.csv("Rank_GSS40_MI (13).csv")#
glrm15 = read.csv("Rank_GSS40_MI (14).csv")#
glrm16 = read.csv("Rank_GSS40_MI (15).csv")#
glrm17 = read.csv("Rank_GSS40_MI (16).csv")#
glrm18 = read.csv("Rank_GSS40_MI (17).csv")#
glrm19 = read.csv("Rank_GSS40_MI (18).csv")#
glrm20 = read.csv("Rank_GSS40_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s40.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s40 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s40 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s40 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s40 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s40 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s40 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s40 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s40 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s40 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s40 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s40 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s40 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s40 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s40 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s40 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s40 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s40 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s40 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s40 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk40 = c(l.rk40, LOSS.RK1$loss)#
l.rk40 = c(l.rk40, LOSS.RK2$loss)#
l.rk40 = c(l.rk40, LOSS.RK3$loss)#
l.rk40 = c(l.rk40, LOSS.RK4$loss)#
l.rk40 = c(l.rk40, LOSS.RK5$loss)#
l.rk40 = c(l.rk40, LOSS.RK6$loss)#
l.rk40 = c(l.rk40, LOSS.RK7$loss)#
l.rk40 = c(l.rk40, LOSS.RK8$loss)#
l.rk40 = c(l.rk40, LOSS.RK9$loss)#
l.rk40 = c(l.rk40, LOSS.RK10$loss)#
l.rk40 = c(l.rk40, LOSS.RK11$loss)#
l.rk40 = c(l.rk40, LOSS.RK12$loss)#
l.rk40 = c(l.rk40, LOSS.RK13$loss)#
l.rk40 = c(l.rk40, LOSS.RK14$loss)#
l.rk40 = c(l.rk40, LOSS.RK15$loss)#
l.rk40 = c(l.rk40, LOSS.RK16$loss)#
l.rk40 = c(l.rk40, LOSS.RK17$loss)#
l.rk40 = c(l.rk40, LOSS.RK18$loss)#
l.rk40 = c(l.rk40, LOSS.RK19$loss)#
l.rk40 = c(l.rk40, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 50#
#
glrm1 =  read.csv("Rank_GSS50_MI.csv")#
glrm2 =  read.csv("Rank_GSS50_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS50_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS50_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS50_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS50_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS50_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS50_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS50_MI (8).csv")#
glrm10 = read.csv("Rank_GSS50_MI (9).csv")#
glrm11 = read.csv("Rank_GSS50_MI (10).csv")#
glrm12 = read.csv("Rank_GSS50_MI (11).csv")#
glrm13 = read.csv("Rank_GSS50_MI (12).csv")#
glrm14 = read.csv("Rank_GSS50_MI (13).csv")#
glrm15 = read.csv("Rank_GSS50_MI (14).csv")#
glrm16 = read.csv("Rank_GSS50_MI (15).csv")#
glrm17 = read.csv("Rank_GSS50_MI (16).csv")#
glrm18 = read.csv("Rank_GSS50_MI (17).csv")#
glrm19 = read.csv("Rank_GSS50_MI (18).csv")#
glrm20 = read.csv("Rank_GSS50_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s50.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s50 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s50 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s50 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s50 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s50 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s50 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s50 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s50 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s50 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s50 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s50 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s50 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s50 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s50 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s50 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s50 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s50 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s50 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s50 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk50 = c(l.rk50, LOSS.RK1$loss)#
l.rk50 = c(l.rk50, LOSS.RK2$loss)#
l.rk50 = c(l.rk50, LOSS.RK3$loss)#
l.rk50 = c(l.rk50, LOSS.RK4$loss)#
l.rk50 = c(l.rk50, LOSS.RK5$loss)#
l.rk50 = c(l.rk50, LOSS.RK6$loss)#
l.rk50 = c(l.rk50, LOSS.RK7$loss)#
l.rk50 = c(l.rk50, LOSS.RK8$loss)#
l.rk50 = c(l.rk50, LOSS.RK9$loss)#
l.rk50 = c(l.rk50, LOSS.RK10$loss)#
l.rk50 = c(l.rk50, LOSS.RK11$loss)#
l.rk50 = c(l.rk50, LOSS.RK12$loss)#
l.rk50 = c(l.rk50, LOSS.RK13$loss)#
l.rk50 = c(l.rk50, LOSS.RK14$loss)#
l.rk50 = c(l.rk50, LOSS.RK15$loss)#
l.rk50 = c(l.rk50, LOSS.RK16$loss)#
l.rk50 = c(l.rk50, LOSS.RK17$loss)#
l.rk50 = c(l.rk50, LOSS.RK18$loss)#
l.rk50 = c(l.rk50, LOSS.RK19$loss)#
l.rk50 = c(l.rk50, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 60#
#
glrm1 =  read.csv("Rank_GSS60_MI.csv")#
glrm2 =  read.csv("Rank_GSS60_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS60_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS60_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS60_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS60_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS60_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS60_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS60_MI (8).csv")#
glrm10 = read.csv("Rank_GSS60_MI (9).csv")#
glrm11 = read.csv("Rank_GSS60_MI (10).csv")#
glrm12 = read.csv("Rank_GSS60_MI (11).csv")#
glrm13 = read.csv("Rank_GSS60_MI (12).csv")#
glrm14 = read.csv("Rank_GSS60_MI (13).csv")#
glrm15 = read.csv("Rank_GSS60_MI (14).csv")#
glrm16 = read.csv("Rank_GSS60_MI (15).csv")#
glrm17 = read.csv("Rank_GSS60_MI (16).csv")#
glrm18 = read.csv("Rank_GSS60_MI (17).csv")#
glrm19 = read.csv("Rank_GSS60_MI (18).csv")#
glrm20 = read.csv("Rank_GSS60_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s60.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s60 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s60 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s60 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s60 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s60 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s60 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s60 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s60 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s60 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s60 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s60 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s60 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s60 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s60 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s60 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s60 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s60 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s60 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s60 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk60 = c(l.rk60, LOSS.RK1$loss)#
l.rk60 = c(l.rk60, LOSS.RK2$loss)#
l.rk60 = c(l.rk60, LOSS.RK3$loss)#
l.rk60 = c(l.rk60, LOSS.RK4$loss)#
l.rk60 = c(l.rk60, LOSS.RK5$loss)#
l.rk60 = c(l.rk60, LOSS.RK6$loss)#
l.rk60 = c(l.rk60, LOSS.RK7$loss)#
l.rk60 = c(l.rk60, LOSS.RK8$loss)#
l.rk60 = c(l.rk60, LOSS.RK9$loss)#
l.rk60 = c(l.rk60, LOSS.RK10$loss)#
l.rk60 = c(l.rk60, LOSS.RK11$loss)#
l.rk60 = c(l.rk60, LOSS.RK12$loss)#
l.rk60 = c(l.rk60, LOSS.RK13$loss)#
l.rk60 = c(l.rk60, LOSS.RK14$loss)#
l.rk60 = c(l.rk60, LOSS.RK15$loss)#
l.rk60 = c(l.rk60, LOSS.RK16$loss)#
l.rk60 = c(l.rk60, LOSS.RK17$loss)#
l.rk60 = c(l.rk60, LOSS.RK18$loss)#
l.rk60 = c(l.rk60, LOSS.RK19$loss)#
l.rk60 = c(l.rk60, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 70#
#
glrm1 =  read.csv("Rank_GSS70_MI.csv")#
glrm2 =  read.csv("Rank_GSS70_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS70_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS70_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS70_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS70_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS70_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS70_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS70_MI (8).csv")#
glrm10 = read.csv("Rank_GSS70_MI (9).csv")#
glrm11 = read.csv("Rank_GSS70_MI (10).csv")#
glrm12 = read.csv("Rank_GSS70_MI (11).csv")#
glrm13 = read.csv("Rank_GSS70_MI (12).csv")#
glrm14 = read.csv("Rank_GSS70_MI (13).csv")#
glrm15 = read.csv("Rank_GSS70_MI (14).csv")#
glrm16 = read.csv("Rank_GSS70_MI (15).csv")#
glrm17 = read.csv("Rank_GSS70_MI (16).csv")#
glrm18 = read.csv("Rank_GSS70_MI (17).csv")#
glrm19 = read.csv("Rank_GSS70_MI (18).csv")#
glrm20 = read.csv("Rank_GSS70_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s70.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s70 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s70 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s70 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s70 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s70 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s70 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s70 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s70 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s70 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s70 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s70 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s70 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s70 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s70 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s70 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s70 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s70 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s70 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s70 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk70 = c(l.rk70, LOSS.RK1$loss)#
l.rk70 = c(l.rk70, LOSS.RK2$loss)#
l.rk70 = c(l.rk70, LOSS.RK3$loss)#
l.rk70 = c(l.rk70, LOSS.RK4$loss)#
l.rk70 = c(l.rk70, LOSS.RK5$loss)#
l.rk70 = c(l.rk70, LOSS.RK6$loss)#
l.rk70 = c(l.rk70, LOSS.RK7$loss)#
l.rk70 = c(l.rk70, LOSS.RK8$loss)#
l.rk70 = c(l.rk70, LOSS.RK9$loss)#
l.rk70 = c(l.rk70, LOSS.RK10$loss)#
l.rk70 = c(l.rk70, LOSS.RK11$loss)#
l.rk70 = c(l.rk70, LOSS.RK12$loss)#
l.rk70 = c(l.rk70, LOSS.RK13$loss)#
l.rk70 = c(l.rk70, LOSS.RK14$loss)#
l.rk70 = c(l.rk70, LOSS.RK15$loss)#
l.rk70 = c(l.rk70, LOSS.RK16$loss)#
l.rk70 = c(l.rk70, LOSS.RK17$loss)#
l.rk70 = c(l.rk70, LOSS.RK18$loss)#
l.rk70 = c(l.rk70, LOSS.RK19$loss)#
l.rk70 = c(l.rk70, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 80#
#
glrm1 =  read.csv("Rank_GSS80_MI.csv")#
glrm2 =  read.csv("Rank_GSS80_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS80_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS80_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS80_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS80_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS80_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS80_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS80_MI (8).csv")#
glrm10 = read.csv("Rank_GSS80_MI (9).csv")#
glrm11 = read.csv("Rank_GSS80_MI (10).csv")#
glrm12 = read.csv("Rank_GSS80_MI (11).csv")#
glrm13 = read.csv("Rank_GSS80_MI (12).csv")#
glrm14 = read.csv("Rank_GSS80_MI (13).csv")#
glrm15 = read.csv("Rank_GSS80_MI (14).csv")#
glrm16 = read.csv("Rank_GSS80_MI (15).csv")#
glrm17 = read.csv("Rank_GSS80_MI (16).csv")#
glrm18 = read.csv("Rank_GSS80_MI (17).csv")#
glrm19 = read.csv("Rank_GSS80_MI (18).csv")#
glrm20 = read.csv("Rank_GSS80_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s80.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s80 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s80 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s80 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s80 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s80 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s80 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s80 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s80 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s80 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s80 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s80 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s80 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s80 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s80 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s80 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s80 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s80 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s80 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s80 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk80 = c(l.rk80, LOSS.RK1$loss)#
l.rk80 = c(l.rk80, LOSS.RK2$loss)#
l.rk80 = c(l.rk80, LOSS.RK3$loss)#
l.rk80 = c(l.rk80, LOSS.RK4$loss)#
l.rk80 = c(l.rk80, LOSS.RK5$loss)#
l.rk80 = c(l.rk80, LOSS.RK6$loss)#
l.rk80 = c(l.rk80, LOSS.RK7$loss)#
l.rk80 = c(l.rk80, LOSS.RK8$loss)#
l.rk80 = c(l.rk80, LOSS.RK9$loss)#
l.rk80 = c(l.rk80, LOSS.RK10$loss)#
l.rk80 = c(l.rk80, LOSS.RK11$loss)#
l.rk80 = c(l.rk80, LOSS.RK12$loss)#
l.rk80 = c(l.rk80, LOSS.RK13$loss)#
l.rk80 = c(l.rk80, LOSS.RK14$loss)#
l.rk80 = c(l.rk80, LOSS.RK15$loss)#
l.rk80 = c(l.rk80, LOSS.RK16$loss)#
l.rk80 = c(l.rk80, LOSS.RK17$loss)#
l.rk80 = c(l.rk80, LOSS.RK18$loss)#
l.rk80 = c(l.rk80, LOSS.RK19$loss)#
l.rk80 = c(l.rk80, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
######## 90#
#
glrm1 =  read.csv("Rank_GSS90_MI.csv")#
glrm2 =  read.csv("Rank_GSS90_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS90_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS90_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS90_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS90_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS90_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS90_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS90_MI (8).csv")#
glrm10 = read.csv("Rank_GSS90_MI (9).csv")#
glrm11 = read.csv("Rank_GSS90_MI (10).csv")#
glrm12 = read.csv("Rank_GSS90_MI (11).csv")#
glrm13 = read.csv("Rank_GSS90_MI (12).csv")#
glrm14 = read.csv("Rank_GSS90_MI (13).csv")#
glrm15 = read.csv("Rank_GSS90_MI (14).csv")#
glrm16 = read.csv("Rank_GSS90_MI (15).csv")#
glrm17 = read.csv("Rank_GSS90_MI (16).csv")#
glrm18 = read.csv("Rank_GSS90_MI (17).csv")#
glrm19 = read.csv("Rank_GSS90_MI (18).csv")#
glrm20 = read.csv("Rank_GSS90_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s90.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s90 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s90 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s90 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s90 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s90 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s90 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s90 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s90 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s90 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s90 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s90 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s90 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s90 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s90 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s90 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s90 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s90 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s90 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s90 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk90 = c(l.rk90, LOSS.RK1$loss)#
l.rk90 = c(l.rk90, LOSS.RK2$loss)#
l.rk90 = c(l.rk90, LOSS.RK3$loss)#
l.rk90 = c(l.rk90, LOSS.RK4$loss)#
l.rk90 = c(l.rk90, LOSS.RK5$loss)#
l.rk90 = c(l.rk90, LOSS.RK6$loss)#
l.rk90 = c(l.rk90, LOSS.RK7$loss)#
l.rk90 = c(l.rk90, LOSS.RK8$loss)#
l.rk90 = c(l.rk90, LOSS.RK9$loss)#
l.rk90 = c(l.rk90, LOSS.RK10$loss)#
l.rk90 = c(l.rk90, LOSS.RK11$loss)#
l.rk90 = c(l.rk90, LOSS.RK12$loss)#
l.rk90 = c(l.rk90, LOSS.RK13$loss)#
l.rk90 = c(l.rk90, LOSS.RK14$loss)#
l.rk90 = c(l.rk90, LOSS.RK15$loss)#
l.rk90 = c(l.rk90, LOSS.RK16$loss)#
l.rk90 = c(l.rk90, LOSS.RK17$loss)#
l.rk90 = c(l.rk90, LOSS.RK18$loss)#
l.rk90 = c(l.rk90, LOSS.RK19$loss)#
l.rk90 = c(l.rk90, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )#
#
save(l.rk10, l.rk20, l.rk30, l.rk40, l.rk50, l.rk60, l.rk70, l.rk80, l.rk90 , file = "rank_consistency.RData")
lenth(l.rk10)
length(l.rk10)
length(l.rk20)
length(l.rk30)
length(l.rk40)
length(l.rk50)
length(l.rk60)
length(l.rk70)
length(l.rk80)
length(l.rk90)
glrm4 =  read.csv("Rank_GSS50_MI (3).csv")
sdf4 =  as.numeric(unlist(read.csv("Rank_s50 (3).csv", header = FALSE)))
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )
l.rk50 = c(l.rk50, LOSS.RK4$loss)
glrm20 = read.csv("Rank_GSS40_MI (19).csv")
sdf20 = as.numeric(unlist(read.csv("Rank_s40 (19).csv", header = FALSE)))
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )
l.rk40 = c(l.rk40, LOSS.RK20$loss)
length(l.rk40)
length(l.rk50)
save(l.rk10, l.rk20, l.rk30, l.rk40, l.rk50, l.rk60, l.rk70, l.rk80, l.rk90 , file = "rank_consistency.RData")
load("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/GSS/RANK/rank_consistency.RData")
l.rk10
# given dataframe df , list of categoricals cat1, imputed dataset IMP#
#
library("xtable")#
#
rm(list = ls())#
#
###Calculating scaled loss given original data df.base, categorical columns cat1, imputed dataset IMP#
loss = function(IMP, df.base, s, cat1, ord1, real1){#
#
	l = 0#
	lcol = rep(0, dim(IMP)[2])#
	n = nrow(IMP)#
	m = ncol(IMP)#
df.base0 = df.base#
#
# scale numeric & integer columns and attach scaled columns to categorical columns#
#
df.scale.real = scale(df.base[, real1])#
df.scale.ord = numeric()#
for (o in 1: length(ord1)){#
df.scale.ord = cbind(df.scale.ord, 	(df.base[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
df.base[,real1] = df.scale.real#
df.base[,ord1] = df.scale.ord#
#
IMP.scale.real = scale(IMP[, real1])#
IMP.scale.ord = numeric()#
for (o in 1: length(ord1)){#
IMP.scale.ord = cbind(IMP.scale.ord, 	(IMP[, ord1[o]] - min(df.base0[, ord1[o]] , na.rm = TRUE))/ (max(df.base0[, ord1[o]], na.rm = TRUE) - min(df.base0[, ord1[o]], na.rm = TRUE )))#
}#
#
IMP[,real1] = IMP.scale.real#
IMP[,ord1] = IMP.scale.ord#
#
# now we loop through all induced missing values and add up the errors#
#
for (j in 1:length(s)){#
	ind = s[j]#
#	print(j)#
# converting indices to markix row and columns#
	r = ((ind-1) %% n) + 1 #
	c = floor((ind-1) / n) + 1#
# for categorical columns loss is whether or not mis-classified  (also keeping rkack of number of factor levels here)#
#
	if ( is.element(c,cat1)){#
		if(!is.na(df.base[r,c])){#
		l = l+ (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lind = (1 - 1*(df.base[r,c]== IMP[r,c] ))#
		lcol[c] = lcol[c]+ lind} }#
# for remaining columns loss is squared difference#
    if (!is.element(c,cat1) ){#
    	if(!is.na(df.base[r,c])){#
    	l = l + (df.base[r,c] - IMP[r,c])^2#
    	lind = (df.base[r,c] - IMP[r,c])^2	#
	lcol[c] = lcol[c] + lind}}#
	#	print(c(j, c, r, lind, lcol[c], l))#
		}	#
#
	rm(lind)#
# get back total loss, columnwise loss and checks for factor levels#
	return(list(loss = l/length(s), lcol = lcol))}#
# add factor levels to make comparisons possible if needed #
#
factorLevels <- function(IMP, df.base, cat1){#
	for (k in 1: length(cat1)){#
		levs = levels(df.base[, cat1[k]])#
		IMP[, cat1[k]] = factor(IMP[, cat1[k]], levels = levs)#
		print(c(k, cat1[k], sum(is.na(IMP[,cat1[k]]))))#
		}#
       IMPfin = IMP#
       for (h in 1: length(cat1)){#
       	g = length(levels(df.base[,cat1[h]]))#
       	b = length(levels(IMPfin[, cat1[h]]))#
       	print(g-b)}#
 return(IMPfin)}#
#
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/GSS/Data")#
#
df.base = read.csv("GSScleaned.csv")[,-1] #df without CV indices removed#
cat1 = read.csv("GSScategoricals.csv")[, -1]#
ord1 = read.csv("GSSordinals.csv")[, -1]#
real1 = which(!is.element(seq(1: dim(df.base)[2]),c(ord1, cat1)))
l.rk40 = numeric()
setwd("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/GSS/RANK")
######## 40#
#
glrm1 =  read.csv("Rank_GSS40_MI.csv")#
glrm2 =  read.csv("Rank_GSS40_MI (1).csv")#
glrm3 =  read.csv("Rank_GSS40_MI (2).csv")#
glrm4 =  read.csv("Rank_GSS40_MI (3).csv")#
glrm5 =  read.csv("Rank_GSS40_MI (4).csv")#
glrm6 =  read.csv("Rank_GSS40_MI (5).csv")#
glrm7 =  read.csv("Rank_GSS40_MI (6).csv")#
glrm8 =  read.csv("Rank_GSS40_MI (7).csv")#
glrm9 =  read.csv("Rank_GSS40_MI (8).csv")#
glrm10 = read.csv("Rank_GSS40_MI (9).csv")#
glrm11 = read.csv("Rank_GSS40_MI (10).csv")#
glrm12 = read.csv("Rank_GSS40_MI (11).csv")#
glrm13 = read.csv("Rank_GSS40_MI (12).csv")#
glrm14 = read.csv("Rank_GSS40_MI (13).csv")#
glrm15 = read.csv("Rank_GSS40_MI (14).csv")#
glrm16 = read.csv("Rank_GSS40_MI (15).csv")#
glrm17 = read.csv("Rank_GSS40_MI (16).csv")#
glrm18 = read.csv("Rank_GSS40_MI (17).csv")#
glrm19 = read.csv("Rank_GSS40_MI (18).csv")#
glrm20 = read.csv("Rank_GSS40_MI (19).csv")#
#
sdf1 =  as.numeric(unlist(read.csv("Rank_s40.csv", header = FALSE)))#
sdf2 =  as.numeric(unlist(read.csv("Rank_s40 (1).csv", header = FALSE)))#
sdf3 =  as.numeric(unlist(read.csv("Rank_s40 (2).csv", header = FALSE)))#
sdf4 =  as.numeric(unlist(read.csv("Rank_s40 (3).csv", header = FALSE)))#
sdf5 =  as.numeric(unlist(read.csv("Rank_s40 (4).csv", header = FALSE)))#
sdf6 =  as.numeric(unlist(read.csv("Rank_s40 (5).csv", header = FALSE)))#
sdf7 =  as.numeric(unlist(read.csv("Rank_s40 (6).csv", header = FALSE)))#
sdf8 =  as.numeric(unlist(read.csv("Rank_s40 (7).csv", header = FALSE)))#
sdf9 =  as.numeric(unlist(read.csv("Rank_s40 (8).csv", header = FALSE)))#
sdf10 = as.numeric(unlist(read.csv("Rank_s40 (9).csv", header = FALSE)))#
sdf11 = as.numeric(unlist(read.csv("Rank_s40 (10).csv", header = FALSE)))#
sdf12 = as.numeric(unlist(read.csv("Rank_s40 (11).csv", header = FALSE)))#
sdf13 = as.numeric(unlist(read.csv("Rank_s40 (12).csv", header = FALSE)))#
sdf14 = as.numeric(unlist(read.csv("Rank_s40 (13).csv", header = FALSE)))#
sdf15 = as.numeric(unlist(read.csv("Rank_s40 (14).csv", header = FALSE)))#
sdf16 = as.numeric(unlist(read.csv("Rank_s40 (15).csv", header = FALSE)))#
sdf17 = as.numeric(unlist(read.csv("Rank_s40 (16).csv", header = FALSE)))#
sdf18 = as.numeric(unlist(read.csv("Rank_s40 (17).csv", header = FALSE)))#
sdf19 = as.numeric(unlist(read.csv("Rank_s40 (18).csv", header = FALSE)))#
sdf20 = as.numeric(unlist(read.csv("Rank_s40 (19).csv", header = FALSE)))#
GLRM_RK1 = factorLevels(glrm1, df.base, cat1)#
GLRM_RK2 = factorLevels(glrm2, df.base, cat1)#
GLRM_RK3 = factorLevels(glrm3, df.base, cat1)#
GLRM_RK4 = factorLevels(glrm4, df.base, cat1)#
GLRM_RK5 = factorLevels(glrm5, df.base, cat1)#
GLRM_RK6 = factorLevels(glrm6, df.base, cat1)#
GLRM_RK7 = factorLevels(glrm7, df.base, cat1)#
GLRM_RK8 = factorLevels(glrm8, df.base, cat1)#
GLRM_RK9 = factorLevels(glrm9, df.base, cat1)#
GLRM_RK10 = factorLevels(glrm10, df.base, cat1)#
GLRM_RK11 = factorLevels(glrm11, df.base, cat1)#
GLRM_RK12 = factorLevels(glrm12, df.base, cat1)#
GLRM_RK13 = factorLevels(glrm13, df.base, cat1)#
GLRM_RK14 = factorLevels(glrm14, df.base, cat1)#
GLRM_RK15 = factorLevels(glrm15, df.base, cat1)#
GLRM_RK16 = factorLevels(glrm16, df.base, cat1)#
GLRM_RK17 = factorLevels(glrm17, df.base, cat1)#
GLRM_RK18 = factorLevels(glrm18, df.base, cat1)#
GLRM_RK19 = factorLevels(glrm19, df.base, cat1)#
GLRM_RK20 = factorLevels(glrm20, df.base, cat1)#
#
LOSS.RK1  = loss(GLRM_RK1,df.base,sdf1,cat1,ord1, real1 )#
LOSS.RK2  = loss(GLRM_RK2,df.base,sdf2,cat1,ord1, real1 )#
LOSS.RK3  = loss(GLRM_RK3,df.base,sdf3,cat1,ord1, real1 )#
LOSS.RK4  = loss(GLRM_RK4,df.base,sdf4,cat1,ord1, real1 )#
LOSS.RK5  = loss(GLRM_RK5,df.base,sdf5,cat1,ord1, real1 )#
LOSS.RK6  = loss(GLRM_RK6,df.base,sdf6,cat1,ord1, real1 )#
LOSS.RK7  = loss(GLRM_RK7,df.base,sdf7,cat1,ord1, real1 )#
LOSS.RK8  = loss(GLRM_RK8,df.base,sdf8,cat1,ord1, real1 )#
LOSS.RK9  = loss(GLRM_RK9,df.base,sdf9,cat1,ord1, real1 )#
LOSS.RK10  = loss(GLRM_RK10,df.base,sdf10,cat1,ord1, real1 )#
LOSS.RK11  = loss(GLRM_RK11,df.base,sdf11,cat1,ord1, real1 )#
LOSS.RK12  = loss(GLRM_RK12,df.base,sdf12,cat1,ord1, real1 )#
LOSS.RK13  = loss(GLRM_RK13,df.base,sdf13,cat1,ord1, real1 )#
LOSS.RK14  = loss(GLRM_RK14,df.base,sdf14,cat1,ord1, real1 )#
LOSS.RK15  = loss(GLRM_RK15,df.base,sdf15,cat1,ord1, real1 )#
LOSS.RK16  = loss(GLRM_RK16,df.base,sdf16,cat1,ord1, real1 )#
LOSS.RK17  = loss(GLRM_RK17,df.base,sdf17,cat1,ord1, real1 )#
LOSS.RK18  = loss(GLRM_RK18,df.base,sdf18,cat1,ord1, real1 )#
LOSS.RK19  = loss(GLRM_RK19,df.base,sdf19,cat1,ord1, real1 )#
LOSS.RK20  = loss(GLRM_RK20,df.base,sdf20,cat1,ord1, real1 )#
l.rk40 = c(l.rk40, LOSS.RK1$loss)#
l.rk40 = c(l.rk40, LOSS.RK2$loss)#
l.rk40 = c(l.rk40, LOSS.RK3$loss)#
l.rk40 = c(l.rk40, LOSS.RK4$loss)#
l.rk40 = c(l.rk40, LOSS.RK5$loss)#
l.rk40 = c(l.rk40, LOSS.RK6$loss)#
l.rk40 = c(l.rk40, LOSS.RK7$loss)#
l.rk40 = c(l.rk40, LOSS.RK8$loss)#
l.rk40 = c(l.rk40, LOSS.RK9$loss)#
l.rk40 = c(l.rk40, LOSS.RK10$loss)#
l.rk40 = c(l.rk40, LOSS.RK11$loss)#
l.rk40 = c(l.rk40, LOSS.RK12$loss)#
l.rk40 = c(l.rk40, LOSS.RK13$loss)#
l.rk40 = c(l.rk40, LOSS.RK14$loss)#
l.rk40 = c(l.rk40, LOSS.RK15$loss)#
l.rk40 = c(l.rk40, LOSS.RK16$loss)#
l.rk40 = c(l.rk40, LOSS.RK17$loss)#
l.rk40 = c(l.rk40, LOSS.RK18$loss)#
l.rk40 = c(l.rk40, LOSS.RK19$loss)#
l.rk40 = c(l.rk40, LOSS.RK20$loss)#
#
rm(glrm1, glrm2, glrm3, glrm4, glrm5,  glrm6, glrm7, glrm8, glrm9, glrm10, #
glrm11, glrm12, glrm13, glrm14, glrm15,  glrm16, glrm17, glrm18, glrm19, glrm20, #
GLRM_RK1, GLRM_RK2, GLRM_RK3, GLRM_RK4, GLRM_RK5,  GLRM_RK6, GLRM_RK7, GLRM_RK8, GLRM_RK9, GLRM_RK10, #
GLRM_RK11, GLRM_RK12, GLRM_RK13, GLRM_RK14, GLRM_RK15,  GLRM_RK16, GLRM_RK17, GLRM_RK18, GLRM_RK19, GLRM_RK20, #
sdf1, sdf2, sdf3, sdf4, sdf5,  sdf6, sdf7, sdf8, sdf9, sdf10, #
sdf11, sdf12, sdf13, sdf14, sdf15,  sdf16, sdf17, sdf18, sdf19, sdf20,#
LOSS.RK1, LOSS.RK2, LOSS.RK3, LOSS.RK4, LOSS.RK5,  LOSS.RK6, LOSS.RK7, LOSS.RK8, LOSS.RK9, LOSS.RK10, #
LOSS.RK11, LOSS.RK12, LOSS.RK13, LOSS.RK14, LOSS.RK15,  LOSS.RK16, LOSS.RK17, LOSS.RK18, LOSS.RK19, LOSS.RK20 )
new.rk40 = l.rk40
l.rk40
new.rk10
new.rk40
load("/Users/Nandana/Desktop/GitHub folder/MissingValues/Apr 2017/consistency/GSS/RANK/rank_consistency.RData")
lk.40
l.rk40
l.rk40 = new.rk40
save(l.rk10, l.rk20, l.rk30, l.rk40, l.rk50, l.rk60, l.rk70, l.rk80, l.rk90 , file = "rank_consistency.RData")
